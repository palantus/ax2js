/*
case "UTS": //String
case "UTZ": //DateTime
case "UTI": //Int
case "UTE": //EDT Enum
case "UTR": //Real
case "UTD": //Date
case "UTW": //Int64
case "UTQ": //Container
*/

var types = [
	{name: "TableId", type: "edt", subtype: "UTI"},
	{name: "FieldId", type: "edt", subtype: "UTI"},
	{name: "FieldName", type: "edt", subtype: "UTS"},
	{name: "NoYes", type: "edt", subtype: "UTE", values: [
						{EnumValue: 0, Name: "No"},
						{EnumValue: 1, Name: "Yes"}
	]},
	{name: "SelectionField", type: "edt", subtype: "UTE", values: [
            {EnumValue: 1, Name: 'Sum', Label: 'Sum'},
            {EnumValue: 2, Name: 'Min', Label: 'Min'},
            {EnumValue: 3, Name: 'Max', Label: 'Max'},
            {EnumValue: 4, Name: 'Count', Label: 'Count'},
            {EnumValue: 5, Name: 'Database', Label: 'Database'},
            {EnumValue: 6, Name: 'Avg', Label: 'Avg'}
  ]},
	{name: "Types", type: "edt", subtype: "UTE", values: [
            {EnumValue: 1, Name: 'Integer', Label: 'Integer'},
            {EnumValue: 2, Name: 'Real', Label: 'Real'},
            {EnumValue: 3, Name: 'Date', Label: 'Date'},
            {EnumValue: 4, Name: 'Enum', Label: 'Enum'},
            {EnumValue: 5, Name: 'RString', Label: 'RString'},
            {EnumValue: 6, Name: 'UtcDateTime', Label: 'UtcDateTime'},
            {EnumValue: 7, Name: 'Container', Label: 'Container'},
            {EnumValue: 8, Name: 'VarString', Label: 'VarString'},
            {EnumValue: 9, Name: 'Record', Label: 'Record'},
            {EnumValue: 10, Name: 'Class', Label: 'Class'},
            {EnumValue: 11, Name: 'UserType', Label: 'UserType'},
            {EnumValue: 12, Name: 'AnyType', Label: 'AnyType'},
            {EnumValue: 13, Name: 'BLOB', Label: 'BLOB'},
            {EnumValue: 14, Name: 'void', Label: 'void'},
            {EnumValue: 15, Name: 'Guid', Label: 'Guid'},
            {EnumValue: 16, Name: 'Int64', Label: 'Int64'},
            {EnumValue: 17, Name: 'Time', Label: 'Time'},
            {EnumValue: 18, Name: '', Label: ''}
  ]},
	{name: "Query", type: "class", writeFile: false, methods: [
					{name: 'classDeclaration', source: 'class Query {}'},
					{name: 'addBaseQuery', source: 'void addBaseQuery(){}'},
					{name: 'addCompanyRange', source: 'void addCompanyRange(){}'},
					{name: 'addDataSource', source: 'void addDataSource(){}'},
					{name: 'allowCheck', source: 'void allowCheck(){}'},
					{name: 'allowCrossCompany', source: 'void allowCrossCompany(){}'},
					{name: 'changedBy', source: 'void changedBy(){}'},
					{name: 'changedDate', source: 'void changedDate(){}'},
					{name: 'changedTime', source: 'void changedTime(){}'},
					{name: 'checkAuthorizationOnOpenRanges', source: 'void checkAuthorizationOnOpenRanges(){}'},
					{name: 'checkFieldAccess', source: 'void checkFieldAccess(){}'},
					{name: 'checkRangeParsingErrors', source: 'void checkRangeParsingErrors(){}'},
					{name: 'childDataSourceCount', source: 'void childDataSourceCount(){}'},
					{name: 'childDataSourceNo', source: 'void childDataSourceNo(){}'},
					{name: 'clearBaseQueries', source: 'void clearBaseQueries(){}'},
					{name: 'clearCompanyRange', source: 'void clearCompanyRange(){}'},
					{name: 'clearGroupBy', source: 'void clearGroupBy(){}'},
					{name: 'clearOrderBy', source: 'void clearOrderBy(){}'},
					{name: 'createdBy', source: 'void createdBy(){}'},
					{name: 'creationDate', source: 'void creationDate(){}'},
					{name: 'creationTime', source: 'void creationTime(){}'},
					{name: 'dataSourceCount', source: 'void dataSourceCount(){}'},
					{name: 'dataSourceName', source: 'void dataSourceName(){}'},
					{name: 'dataSourceNo', source: 'void dataSourceNo(){}'},
					{name: 'dataSourceTable', source: 'void dataSourceTable(){}'},
					{name: 'dataSourceUniqueId', source: 'void dataSourceUniqueId(){}'},
					{name: 'equal', source: 'void equal(){}'},
					{name: 'exportXML', source: 'void exportXML(){}'},
					{name: 'finalize', source: 'void finalize(){}'},
					{name: 'forceNestedLoop', source: 'void forceNestedLoop(){}'},
					{name: 'forceSelectOrder', source: 'void forceSelectOrder(){}'},
					{name: 'form', source: 'void form(){}'},
					{name: 'getCompanyRange', source: 'void getCompanyRange(){}'},
					{name: 'getNextUniqueId', source: 'void getNextUniqueId(){}'},
					{name: 'groupByField', source: 'void groupByField(){}'},
					{name: 'groupByFieldCount', source: 'void groupByFieldCount(){}'},
					{name: 'inReport', source: 'void inReport(){}'},
					{name: 'interactive', source: 'void interactive(){}'},
					{name: 'isCompositeQuery', source: 'void isCompositeQuery(){}'},
					{name: 'levelNo', source: 'void levelNo(){}'},
					{name: 'levelTable', source: 'void levelTable(){}'},
					{name: 'literals', source: 'void literals(){}'},
					{name: 'lockedBy', source: 'void lockedBy(){}'},
					{name: 'name', source: 'void name(){}'},
					{name: 'new', source: 'void new(){}'},
					{name: 'newObject', source: 'void newObject(){}'},
					{name: 'nextUniqueId', source: 'void nextUniqueId(){}'},
					{name: 'orderByField', source: 'void orderByField(){}'},
					{name: 'orderByFieldCount', source: 'void orderByFieldCount(){}'},
					{name: 'pack', source: 'void pack(){}'},
					{name: 'packInternals', source: 'void packInternals(){}'},
					{name: 'queryType', source: 'void queryType(){}'},
					{name: 'recordLevelSecurity', source: 'void recordLevelSecurity(){}'},
					{name: 'report', source: 'void report(){}'},
					{name: 'saved', source: 'void saved(){}'},
					{name: 'title', source: 'void title(){}'},
					{name: 'toString', source: 'void toString(){}'},
					{name: 'unpackInternals', source: 'void unpackInternals(){}'},
					{name: 'userUpdate', source: 'void userUpdate(){}'},
					{name: 'version', source: 'void version(){}'},
					{name: 'xml', source: 'void xml(){}'}
]},
{name: "QueryBuildDataSource", type: "class", writeFile: false, methods: [
					{name: 'classDeclaration', source: 'class QueryBuildDataSource {}'},
					{name: 'addDataSource', source: 'void addDataSource(){}'},
					{name: 'addDynalink', source: 'void addDynalink(){}'},
					{name: 'addGroupByField', source: 'void addGroupByField(){}'},
					{name: 'addLink', source: 'void addLink(){}'},
					{name: 'addOrderByField', source: 'void addOrderByField(){}'},
					{name: 'addRange', source: 'void addRange(){}'},
					{name: 'addRelation', source: 'void addRelation(){}'},
					{name: 'addSelectionField', source: 'void addSelectionField(){}'},
					{name: 'addSortField', source: 'void addSortField(){}'},
					{name: 'addSortIndex', source: 'void addSortIndex(){}'},
					{name: 'allowAdd', source: 'void allowAdd(){}'},
					{name: 'autoHeader', source: 'void autoHeader(){}'},
					{name: 'autoHeaderDetailLevel', source: 'void autoHeaderDetailLevel(){}'},
					{name: 'autoSum', source: 'void autoSum(){}'},
					{name: 'autoSumDetailLevel', source: 'void autoSumDetailLevel(){}'},
					{name: 'childDataSourceCount', source: 'void childDataSourceCount(){}'},
					{name: 'childDataSourceNo', source: 'void childDataSourceNo(){}'},
					{name: 'clearDynalinks', source: 'void clearDynalinks(){}'},
					{name: 'clearLinks', source: 'void clearLinks(){}'},
					{name: 'clearRange', source: 'void clearRange(){}'},
					{name: 'clearRanges', source: 'void clearRanges(){}'},
					{name: 'clearSortIndex', source: 'void clearSortIndex(){}'},
					{name: 'company', source: 'void company(){}'},
					{name: 'concurrencyModel', source: 'void concurrencyModel(){}'},
					{name: 'dynalink', source: 'void dynalink(){}'},
					{name: 'dynalinkCount', source: 'void dynalinkCount(){}'},
					{name: 'embedded', source: 'void embedded(){}'},
					{name: 'enabled', source: 'void enabled(){}'},
					{name: 'fetchMode', source: 'void fetchMode(){}'},
					{name: 'fields', source: 'void fields(){}'},
					{name: 'file', source: 'void file(){}'},
					{name: 'finalize', source: 'void finalize(){}'},
					{name: 'findRange', source: 'void findRange(){}'},
					{name: 'firstFast', source: 'void firstFast(){}'},
					{name: 'firstOnly', source: 'void firstOnly(){}'},
					{name: 'id', source: 'void id(){}'},
					{name: 'indexIsHint', source: 'void indexIsHint(){}'},
					{name: 'isPartOfSubQueryInBaseQuery', source: 'void isPartOfSubQueryInBaseQuery(){}'},
					{name: 'joined', source: 'void joined(){}'},
					{name: 'joinedDataSources', source: 'void joinedDataSources(){}'},
					{name: 'joinMode', source: 'void joinMode(){}'},
					{name: 'label', source: 'void label(){}'},
					{name: 'level', source: 'void level(){}'},
					{name: 'link', source: 'void link(){}'},
					{name: 'linkCount', source: 'void linkCount(){}'},
					{name: 'linkFields', source: 'void linkFields(){}'},
					{name: 'name', source: 'void name(){}'},
					{name: 'oneToOneDataSources', source: 'void oneToOneDataSources(){}'},
					{name: 'orderMode', source: 'void orderMode(){}'},
					{name: 'parentDataSource', source: 'void parentDataSource(){}'},
					{name: 'range', source: 'void range(){}'},
					{name: 'rangeCount', source: 'void rangeCount(){}'},
					{name: 'rangeField', source: 'void rangeField(){}'},
					{name: 'relations', source: 'void relations(){}'},
					{name: 'selectionCount', source: 'void selectionCount(){}'},
					{name: 'selectWithRepeatableRead', source: 'void selectWithRepeatableRead(){}'},
					{name: 'sortClear', source: 'void sortClear(){}'},
					{name: 'sortDirection', source: 'void sortDirection(){}'},
					{name: 'sortField', source: 'void sortField(){}'},
					{name: 'sortFieldCount', source: 'void sortFieldCount(){}'},
					{name: 'sortIndex', source: 'void sortIndex(){}'},
					{name: 'sortIndexCount', source: 'void sortIndexCount(){}'},
					{name: 'table', source: 'void table(){}'},
					{name: 'toString', source: 'void toString(){}'},
					{name: 'unionType', source: 'void unionType(){}'},
					{name: 'uniqueId', source: 'void uniqueId(){}'},
					{name: 'update', source: 'void update(){}'}
]},
{name: "QueryBuildRange", type: "class", writeFile: false, methods: [
					{name: 'classDeclaration', source: 'class QueryBuildRange {}'},
					{name: 'associateRangeNodeToCompositeQuery', source: 'void associateRangeNodeToCompositeQuery(){}'},
					{name: 'dataSource', source: 'void dataSource(){}'},
					{name: 'doesRangeNodeBelongToCompositeQuery', source: 'void doesRangeNodeBelongToCompositeQuery(){}'},
					{name: 'enabled', source: 'void enabled(){}'},
					{name: 'field', source: 'void field(){}'},
					{name: 'finalize', source: 'void finalize(){}'},
					{name: 'label', source: 'void label(){}'},
					{name: 'name', source: 'void name(){}'},
					{name: 'prompt', source: 'void prompt(){}'},
					{name: 'status', source: 'void status(){}'},
					{name: 'table', source: 'void table(){}'},
					{name: 'toString', source: 'void toString(){}'},
					{name: 'typeof', source: 'void typeof(){}'},
					{name: 'valid', source: 'void valid(){}'},
					{name: 'value', source: 'void value(){}'}
]},
{name: "QueryRun", type: "class", writeFile: false, methods: [
					{name: 'classDeclaration', source: 'class QueryRun {}'},
					{name: 'addPageRange', source: 'void addPageRange(){}'},
					{name: 'allowCheck', source: 'void allowCheck(){}'},
					{name: 'allowCrossCompany', source: 'void allowCrossCompany(){}'},
					{name: 'applyValueBasedPaging', source: 'void applyValueBasedPaging(){}'},
					{name: 'canPage', source: 'void canPage(){}'},
					{name: 'changed', source: 'void changed(){}'},
					{name: 'changedBy', source: 'void changedBy(){}'},
					{name: 'changedDate', source: 'void changedDate(){}'},
					{name: 'changedNo', source: 'void changedNo(){}'},
					{name: 'changedTime', source: 'void changedTime(){}'},
					{name: 'createdBy', source: 'void createdBy(){}'},
					{name: 'creationDate', source: 'void creationDate(){}'},
					{name: 'creationTime', source: 'void creationTime(){}'},
					{name: 'enablePositionPaging', source: 'void enablePositionPaging(){}'},
					{name: 'enableValueBasedPaging', source: 'void enableValueBasedPaging(){}'},
					{name: 'equal', source: 'void equal(){}'},
					{name: 'form', source: 'void form(){}'},
					{name: 'get', source: 'void get(){}'},
					{name: 'getNo', source: 'void getNo(){}'},
					{name: 'init', source: 'void init(){}'},
					{name: 'interactive', source: 'void interactive(){}'},
					{name: 'isPositionPagingEnabled', source: 'void isPositionPagingEnabled(){}'},
					{name: 'isValueBasedPagingEnabled', source: 'void isValueBasedPagingEnabled(){}'},
					{name: 'literals', source: 'void literals(){}'},
					{name: 'lockedBy', source: 'void lockedBy(){}'},
					{name: 'name', source: 'void name(){}'},
					{name: 'new', source: 'void new(){}'},
					{name: 'newObject', source: 'void newObject(){}'},
					{name: 'next', source: 'void next(){}'},
					{name: 'nextUniqueId', source: 'void nextUniqueId(){}'},
					{name: 'pack', source: 'void pack(){}'},
					{name: 'prompt', source: 'void prompt(){}'},
					{name: 'query', source: 'void query(){}'},
					{name: 'queryType', source: 'void queryType(){}'},
					{name: 'recordLevelSecurity', source: 'void recordLevelSecurity(){}'},
					{name: 'report', source: 'void report(){}'},
					{name: 'reportRun', source: 'void reportRun(){}'},
					{name: 'reset', source: 'void reset(){}'},
					{name: 'run', source: 'void run(){}'},
					{name: 'saved', source: 'void saved(){}'},
					{name: 'saveUserSetup', source: 'void saveUserSetup(){}'},
					{name: 'setCursor', source: 'void setCursor(){}'},
					{name: 'setRecord', source: 'void setRecord(){}'},
					{name: 'title', source: 'void title(){}'},
					{name: 'toString', source: 'void toString(){}'},
					{name: 'userUpdate', source: 'void userUpdate(){}'},
					{name: 'version', source: 'void version(){}'}
]}

];


module.exports = types;
