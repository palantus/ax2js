
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */





// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... es
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "AND": 83,
  "ASC": 38,
  "ASSIGN": 9,
  "BACKSLASH": 91,
  "BITAND": 78,
  "BITLEFT": 80,
  "BITOR": 79,
  "BITRIGHT": 81,
  "BREAK": 86,
  "BY": 37,
  "CASE": 48,
  "CATCH": 52,
  "CLASS": 5,
  "CLIENT": 21,
  "COLON": 49,
  "COMMA": 10,
  "DEFAULT": 50,
  "DEFINE": 16,
  "DESC": 39,
  "DISPLAY": 29,
  "DIV": 73,
  "DO": 46,
  "DOT": 15,
  "DOUBLECOLON": 89,
  "EDIT": 30,
  "ELSE": 43,
  "ENDOFFILE": 3,
  "EOF": 1,
  "EQUALITY": 74,
  "EXISTS": 23,
  "EXTENDS": 8,
  "FIRSTONLY": 26,
  "FOR": 44,
  "FROM": 22,
  "GREATER": 76,
  "GREATERTHAN": 68,
  "HEXNUMBER": 56,
  "ID": 55,
  "IF": 42,
  "INDEX": 35,
  "JOIN": 33,
  "LBRACE": 6,
  "LBRACKET": 40,
  "LESS": 77,
  "LESSTHAN": 69,
  "LPAREN": 17,
  "MACROLIB": 14,
  "METEXPOSUREPRIVATE": 27,
  "METEXPOSUREPROTECTED": 28,
  "METEXPOSUREPUBLIC": 4,
  "MINUS": 64,
  "MOD": 72,
  "NATLITERAL": 12,
  "NATVOID": 53,
  "NEGASSIGN": 88,
  "NEW": 25,
  "NEXT": 24,
  "NOT": 66,
  "NOTEQUALS": 75,
  "NULL": 60,
  "OR": 82,
  "ORDER": 36,
  "PLUS": 65,
  "PLUSASSIGN": 87,
  "PRINTNAT": 63,
  "QUESTIONMARK": 90,
  "RBRACE": 7,
  "RBRACKET": 41,
  "READNAT": 62,
  "RETURN": 85,
  "RPAREN": 18,
  "SELECT": 31,
  "SEMICOLON": 45,
  "SERVER": 19,
  "SLASH": 71,
  "SQUARE": 13,
  "STATIC": 20,
  "STR": 11,
  "STRING": 58,
  "STRING2": 59,
  "SWITCH": 47,
  "SYSTEM": 54,
  "THIS": 61,
  "THROW": 84,
  "TIMES": 70,
  "TRY": 51,
  "UNARY": 67,
  "UTCDATE": 57,
  "WHERE": 34,
  "WHILE": 32,
  "class": 94,
  "classextends": 95,
  "container": 117,
  "containercontent": 118,
  "dowhilestatement": 123,
  "e": 134,
  "el": 133,
  "enumstr": 131,
  "error": 2,
  "forstatement": 121,
  "id": 132,
  "ifstatement": 119,
  "ifstatementelse": 120,
  "macrodefs": 97,
  "mdl": 99,
  "methodbody": 106,
  "methodcallparams": 103,
  "methodddisplay": 105,
  "methodexposure": 104,
  "methodmodifiers": 100,
  "methodname": 101,
  "methodvariables": 102,
  "pgm": 93,
  "selectindex": 112,
  "selectlist": 110,
  "selectmodifier": 113,
  "selectorderby": 114,
  "selectorderbyfields": 115,
  "selectstatement": 107,
  "selectstatementinner": 109,
  "selectwhere": 111,
  "sortorder": 116,
  "start": 92,
  "statementbody": 127,
  "switchbody": 125,
  "switchcaselist": 126,
  "switchstatement": 124,
  "systemref": 130,
  "t": 129,
  "trycatch": 128,
  "vdl": 96,
  "vdllist": 98,
  "whileselectstatement": 108,
  "whilestatement": 122
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "ENDOFFILE",
  4: "METEXPOSUREPUBLIC",
  5: "CLASS",
  6: "LBRACE",
  7: "RBRACE",
  8: "EXTENDS",
  9: "ASSIGN",
  10: "COMMA",
  11: "STR",
  12: "NATLITERAL",
  13: "SQUARE",
  14: "MACROLIB",
  15: "DOT",
  16: "DEFINE",
  17: "LPAREN",
  18: "RPAREN",
  19: "SERVER",
  20: "STATIC",
  21: "CLIENT",
  22: "FROM",
  23: "EXISTS",
  24: "NEXT",
  25: "NEW",
  26: "FIRSTONLY",
  27: "METEXPOSUREPRIVATE",
  28: "METEXPOSUREPROTECTED",
  29: "DISPLAY",
  30: "EDIT",
  31: "SELECT",
  32: "WHILE",
  33: "JOIN",
  34: "WHERE",
  35: "INDEX",
  36: "ORDER",
  37: "BY",
  38: "ASC",
  39: "DESC",
  40: "LBRACKET",
  41: "RBRACKET",
  42: "IF",
  43: "ELSE",
  44: "FOR",
  45: "SEMICOLON",
  46: "DO",
  47: "SWITCH",
  48: "CASE",
  49: "COLON",
  50: "DEFAULT",
  51: "TRY",
  52: "CATCH",
  53: "NATVOID",
  54: "SYSTEM",
  55: "ID",
  56: "HEXNUMBER",
  57: "UTCDATE",
  58: "STRING",
  59: "STRING2",
  60: "NULL",
  61: "THIS",
  62: "READNAT",
  63: "PRINTNAT",
  64: "MINUS",
  65: "PLUS",
  66: "NOT",
  67: "UNARY",
  68: "GREATERTHAN",
  69: "LESSTHAN",
  70: "TIMES",
  71: "SLASH",
  72: "MOD",
  73: "DIV",
  74: "EQUALITY",
  75: "NOTEQUALS",
  76: "GREATER",
  77: "LESS",
  78: "BITAND",
  79: "BITOR",
  80: "BITLEFT",
  81: "BITRIGHT",
  82: "OR",
  83: "AND",
  84: "THROW",
  85: "RETURN",
  86: "BREAK",
  87: "PLUSASSIGN",
  88: "NEGASSIGN",
  89: "DOUBLECOLON",
  90: "QUESTIONMARK",
  91: "BACKSLASH"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  92,
  s,
  [93, 3],
  94,
  94,
  95,
  95,
  s,
  [96, 17],
  s,
  [97, 3],
  s,
  [98, 4],
  99,
  s,
  [100, 21],
  s,
  [101, 6],
  s,
  [102, 3],
  s,
  [103, 3],
  s,
  [104, 4],
  s,
  [105, 3],
  s,
  [106, 4, 1],
  s,
  [109, 5],
  110,
  110,
  111,
  111,
  112,
  112,
  113,
  113,
  114,
  114,
  115,
  115,
  s,
  [116, 3],
  117,
  s,
  [118, 3],
  119,
  119,
  s,
  [120, 3],
  s,
  [121, 5, 1],
  125,
  125,
  126,
  126,
  s,
  [127, 3],
  s,
  [128, 3],
  s,
  [129, 6],
  130,
  130,
  s,
  [131, 8],
  s,
  [132, 3],
  s,
  [133, 22],
  s,
  [134, 58]
]),
  rule: u([
  2,
  1,
  1,
  2,
  7,
  6,
  2,
  0,
  4,
  2,
  4,
  c,
  [3, 4],
  5,
  s,
  [2, 4, 1],
  c,
  [4, 3],
  7,
  8,
  3,
  8,
  0,
  3,
  5,
  3,
  1,
  9,
  1,
  2,
  3,
  2,
  3,
  c,
  [4, 5],
  4,
  c,
  [43, 3],
  4,
  3,
  3,
  4,
  1,
  2,
  0,
  s,
  [1, 6],
  3,
  2,
  0,
  3,
  1,
  c,
  [12, 4],
  c,
  [4, 3],
  0,
  1,
  2,
  6,
  7,
  5,
  6,
  4,
  3,
  4,
  3,
  c,
  [32, 3],
  c,
  [34, 3],
  0,
  3,
  c,
  [84, 3],
  c,
  [24, 3],
  3,
  c,
  [35, 3],
  6,
  5,
  7,
  2,
  0,
  9,
  5,
  c,
  [33, 3],
  3,
  c,
  [50, 3],
  3,
  2,
  c,
  [72, 3],
  7,
  c,
  [63, 3],
  5,
  c,
  [32, 3],
  c,
  [46, 3],
  s,
  [1, 7],
  3,
  4,
  s,
  [2, 5],
  3,
  c,
  [3, 3],
  5,
  8,
  s,
  [9, 3],
  10,
  c,
  [74, 4],
  c,
  [96, 6],
  s,
  [1, 4],
  2,
  c,
  [33, 7],
  s,
  [3, 21],
  s,
  [2, 3],
  c,
  [65, 3],
  s,
  [3, 3],
  5,
  4,
  6,
  3,
  c,
  [103, 4],
  3,
  1,
  5,
  5,
  2
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : start $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 1:
    /*! Production::    start : pgm ENDOFFILE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    
    
    return yyvstack[yysp - 1];
    break;

case 2:
    /*! Production::    pgm : mdl */

    this.$ = {type: "root", subtype: "method", child: yyvstack[yysp]};
    break;

case 3:
    /*! Production::    pgm : class */

    this.$ = {type: "root", subtype: "class", child: yyvstack[yysp]};
    break;

case 4:
    /*! Production::    pgm : macrodefs mdl */

    this.$ = {type: "root", subtype: "macro-method", macro: yyvstack[yysp - 1], method: yyvstack[yysp]}
    break;

case 5:
    /*! Production::    class : METEXPOSUREPUBLIC CLASS id classextends LBRACE el RBRACE */

    this.$ = {type: "class", exposure: yyvstack[yysp - 6], name: yyvstack[yysp - 4], extends: yyvstack[yysp - 3], body: yyvstack[yysp - 1]}
    break;

case 6:
    /*! Production::    class : CLASS id classextends LBRACE el RBRACE */

    this.$ = {type: "class", name: yyvstack[yysp - 4], body: yyvstack[yysp - 1]}
    break;

case 7:
    /*! Production::    classextends : EXTENDS id */
case 94:
    /*! Production::    selectorderbyfields : id sortorder */
case 126:
    /*! Production::    t : STR NATLITERAL */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    break;

case 8:
    /*! Production::    classextends : %epsilon */
case 70:
    /*! Production::    methodexposure : %epsilon */
case 73:
    /*! Production::    methodddisplay : %epsilon */
case 97:
    /*! Production::    sortorder : %epsilon */
case 101:
    /*! Production::    containercontent : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
    this.$ = undefined;
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)
    break;

case 9:
    /*! Production::    vdl : id id ASSIGN e */
case 15:
    /*! Production::    vdl : STR id ASSIGN e */

    this.$ = {type: "variabledeclaration", vartype: yyvstack[yysp - 3], name: yyvstack[yysp - 2], defval: yyvstack[yysp]}
    break;

case 10:
    /*! Production::    vdl : id id */
case 13:
    /*! Production::    vdl : t id */
case 17:
    /*! Production::    vdl : STR id */

    this.$ = {type: "variabledeclaration", vartype: yyvstack[yysp - 1], name: yyvstack[yysp]}
    break;

case 11:
    /*! Production::    vdl : id id COMMA vdllist */
case 14:
    /*! Production::    vdl : t id COMMA vdllist */
case 19:
    /*! Production::    vdl : STR id COMMA vdllist */

    this.$ = {type: "variabledeclaration", vartype: yyvstack[yysp - 3], name: yyvstack[yysp - 2], more: yyvstack[yysp]}
    break;

case 12:
    /*! Production::    vdl : t id ASSIGN e */

    this.$ = {type: "variabledeclaration", vartype: yyvstack[yysp - 3], name: yyvstack[yysp - 2]}
    break;

case 16:
    /*! Production::    vdl : STR NATLITERAL id ASSIGN e */

    this.$ = {type: "variabledeclaration", vartype: yyvstack[yysp - 4], name: yyvstack[yysp - 2], defval: yyvstack[yysp], length: yyvstack[yysp - 3]}
    break;

case 18:
    /*! Production::    vdl : STR NATLITERAL id */

    this.$ = {type: "variabledeclaration", vartype: yyvstack[yysp - 2], name: yyvstack[yysp], length: yyvstack[yysp - 1]}
    break;

case 20:
    /*! Production::    vdl : STR NATLITERAL id COMMA vdllist */

    this.$ = {type: "variabledeclaration", vartype: yyvstack[yysp - 4], name: yyvstack[yysp - 2], more: yyvstack[yysp], length: yyvstack[yysp - 3]}
    break;

case 21:
    /*! Production::    vdl : SQUARE id */
case 23:
    /*! Production::    vdl : SQUARE MACROLIB DOT id */

    this.$ = {type: "macro", name: yyvstack[yysp]}
    break;

case 22:
    /*! Production::    vdl : SQUARE id vdl */
case 26:
    /*! Production::    macrodefs : SQUARE id macrodefs */

    this.$ = [{type: "macro", name: yyvstack[yysp - 1]}, yyvstack[yysp]]
    break;

case 24:
    /*! Production::    vdl : SQUARE DEFINE DOT id LPAREN e RPAREN */

    this.$ = {type: "macrodefine", name: yyvstack[yysp - 3], val: yyvstack[yysp - 1]}
    break;

case 25:
    /*! Production::    vdl : SQUARE DEFINE DOT id LPAREN e RPAREN vdl */
case 27:
    /*! Production::    macrodefs : SQUARE DEFINE DOT id LPAREN e RPAREN macrodefs */

    this.$ = [{type: "macrodefine", name: yyvstack[yysp - 4], val: yyvstack[yysp - 2]}, yyvstack[yysp]]
    break;

case 28:
    /*! Production::    macrodefs : %epsilon */
case 63:
    /*! Production::    methodvariables : %epsilon */
case 66:
    /*! Production::    methodcallparams : %epsilon */
case 113:
    /*! Production::    switchbody : %epsilon */
case 162:
    /*! Production::    el : %epsilon */

    this.$ = {type: "empty"}
    break;

case 29:
    /*! Production::    vdllist : id COMMA vdllist */

    this.$ = {type: "variable", name: yyvstack[yysp - 2], more: yyvstack[yysp]}
    break;

case 30:
    /*! Production::    vdllist : id ASSIGN e COMMA vdllist */

    this.$ = {type: "variable", name: yyvstack[yysp - 4], defval: yyvstack[yysp - 2], more: yyvstack[yysp]}
    break;

case 31:
    /*! Production::    vdllist : id ASSIGN e */

    this.$ = {type: "variable", name: yyvstack[yysp - 2], defval: yyvstack[yysp]}
    break;

case 32:
    /*! Production::    vdllist : id */

    this.$ = {type: "variable", name: yyvstack[yysp]}
    break;

case 33:
    /*! Production::    mdl : methodmodifiers t methodname LPAREN methodvariables RPAREN LBRACE methodbody RBRACE */

    this.$ = {type: "method", isStatic: yyvstack[yysp - 8] == 'static', name: yyvstack[yysp - 6], parms: yyvstack[yysp - 4], body: yyvstack[yysp - 1]}
    break;

case 34:
    /*! Production::    methodmodifiers : SERVER */
case 35:
    /*! Production::    methodmodifiers : SERVER STATIC */
case 36:
    /*! Production::    methodmodifiers : SERVER CLIENT STATIC */
case 37:
    /*! Production::    methodmodifiers : CLIENT STATIC */
case 38:
    /*! Production::    methodmodifiers : CLIENT SERVER STATIC */
case 39:
    /*! Production::    methodmodifiers : STATIC CLIENT */
case 40:
    /*! Production::    methodmodifiers : STATIC CLIENT SERVER */
case 41:
    /*! Production::    methodmodifiers : STATIC SERVER */
case 42:
    /*! Production::    methodmodifiers : STATIC SERVER CLIENT */
case 43:
    /*! Production::    methodmodifiers : STATIC methodexposure */
case 44:
    /*! Production::    methodmodifiers : STATIC methodexposure CLIENT SERVER */
case 45:
    /*! Production::    methodmodifiers : STATIC */
case 47:
    /*! Production::    methodmodifiers : methodexposure STATIC */
case 48:
    /*! Production::    methodmodifiers : methodexposure CLIENT SERVER STATIC */
case 49:
    /*! Production::    methodmodifiers : methodexposure CLIENT STATIC */
case 50:
    /*! Production::    methodmodifiers : methodexposure SERVER STATIC */
case 51:
    /*! Production::    methodmodifiers : methodexposure STATIC CLIENT SERVER */

    this.$ = 'static'
    break;

case 46:
    /*! Production::    methodmodifiers : methodexposure */
case 52:
    /*! Production::    methodmodifiers : methodddisplay */
case 53:
    /*! Production::    methodmodifiers : methodexposure methodddisplay */
case 54:
    /*! Production::    methodmodifiers : %epsilon */
case 67:
    /*! Production::    methodexposure : METEXPOSUREPRIVATE */
case 68:
    /*! Production::    methodexposure : METEXPOSUREPUBLIC */
case 69:
    /*! Production::    methodexposure : METEXPOSUREPROTECTED */
case 71:
    /*! Production::    methodddisplay : DISPLAY */
case 72:
    /*! Production::    methodddisplay : EDIT */
case 86:
    /*! Production::    selectwhere : %epsilon */
case 88:
    /*! Production::    selectindex : %epsilon */
case 90:
    /*! Production::    selectmodifier : %epsilon */
case 92:
    /*! Production::    selectorderby : %epsilon */
case 106:
    /*! Production::    ifstatementelse : %epsilon */

    this.$ = ''
    break;

case 55:
    /*! Production::    methodname : id */
case 62:
    /*! Production::    methodvariables : t e */
case 65:
    /*! Production::    methodcallparams : e */
case 74:
    /*! Production::    methodbody : el */
case 84:
    /*! Production::    selectlist : e */
case 100:
    /*! Production::    containercontent : e */
case 118:
    /*! Production::    statementbody : ifstatement */
case 130:
    /*! Production::    enumstr : id */
case 132:
    /*! Production::    enumstr : CLIENT */
case 133:
    /*! Production::    enumstr : SERVER */
case 134:
    /*! Production::    enumstr : NATVOID */
case 135:
    /*! Production::    enumstr : CLASS */
case 136:
    /*! Production::    enumstr : DISPLAY */
case 137:
    /*! Production::    enumstr : EDIT */
case 158:
    /*! Production::    el : e */
case 217:
    /*! Production::    e : container */

    this.$ = yyvstack[yysp]
    break;

case 56:
    /*! Production::    methodname : FROM */

    this.$ = {type: "id", id: 'from'}
    break;

case 57:
    /*! Production::    methodname : EXISTS */

    this.$ = {type: "id", id: 'exists'}
    break;

case 58:
    /*! Production::    methodname : NEXT */

    this.$ = {type: "id", id: 'next'}
    break;

case 59:
    /*! Production::    methodname : NEW */

    this.$ = {type: "id", id: 'new'}
    break;

case 60:
    /*! Production::    methodname : FIRSTONLY */

    this.$ = {type: "id", id: 'firstonly'}
    break;

case 61:
    /*! Production::    methodvariables : methodvariables COMMA methodvariables */
case 64:
    /*! Production::    methodcallparams : e COMMA methodcallparams */
case 99:
    /*! Production::    containercontent : e COMMA containercontent */
case 146:
    /*! Production::    el : selectstatement SEMICOLON el */
case 157:
    /*! Production::    el : e SEMICOLON el */
case 160:
    /*! Production::    el : vdl SEMICOLON el */

    this.$ = [yyvstack[yysp - 2], yyvstack[yysp]]
    break;

case 75:
    /*! Production::    selectstatement : SELECT selectstatementinner */

    this.$ = {type: "select", inner: yyvstack[yysp]}
    break;

case 76:
    /*! Production::    whileselectstatement : WHILE SELECT selectstatementinner LBRACE el RBRACE */

    this.$ = {type: "whileselect", inner: yyvstack[yysp - 4]}
    break;

case 77:
    /*! Production::    selectstatementinner : selectmodifier selectlist FROM id selectindex selectorderby selectwhere */
case 79:
    /*! Production::    selectstatementinner : selectlist FROM id selectindex selectorderby selectwhere */
case 80:
    /*! Production::    selectstatementinner : id selectindex selectorderby selectwhere */
case 82:
    /*! Production::    selectstatementinner : selectstatementinner EXISTS JOIN selectstatementinner */

    this.$ = yyvstack[yysp - 3]
    break;

case 78:
    /*! Production::    selectstatementinner : selectmodifier id selectindex selectorderby selectwhere */

    this.$ = {modifier: yyvstack[yysp - 4], id: yyvstack[yysp - 3], index: yyvstack[yysp - 2], order: yyvstack[yysp - 1], where: yyvstack[yysp]}
    break;

case 81:
    /*! Production::    selectstatementinner : selectstatementinner JOIN selectstatementinner */

    this.$ = yyvstack[yysp - 2]
    break;

case 83:
    /*! Production::    selectlist : e COMMA selectlist */

    this.$ = yyvstack[yysp - 2] + yyvstack[yysp - 1]
    break;

case 85:
    /*! Production::    selectwhere : WHERE e */

    this.$ = {type: "where", e: yyvstack[yysp]}
    break;

case 87:
    /*! Production::    selectindex : INDEX id */

    this.$ = '.index(' + yyvstack[yysp] + ')'
    break;

case 89:
    /*! Production::    selectmodifier : FIRSTONLY */

    this.$ = {type: "firstonly"}
    break;

case 91:
    /*! Production::    selectorderby : ORDER BY selectorderbyfields */

    this.$ = '.orderby("' + yyvstack[yysp] + '")'
    break;

case 93:
    /*! Production::    selectorderbyfields : id sortorder COMMA selectorderbyfields */
case 173:
    /*! Production::    e : PRINTNAT LPAREN e RPAREN */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 3];
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-)
    break;

case 95:
    /*! Production::    sortorder : ASC */
case 96:
    /*! Production::    sortorder : DESC */
case 122:
    /*! Production::    t : id */
case 123:
    /*! Production::    t : NATVOID */
case 127:
    /*! Production::    t : STR */
case 128:
    /*! Production::    systemref : ID */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 98:
    /*! Production::    container : LBRACKET containercontent RBRACKET */
case 216:
    /*! Production::    e : LBRACKET e RBRACKET */

    this.$ = {type: "container", content: yyvstack[yysp - 1]}
    break;

case 102:
    /*! Production::    ifstatement : IF LPAREN e RPAREN statementbody ifstatementelse */

    this.$ = {type: "if", condition: yyvstack[yysp - 3], body: yyvstack[yysp - 1], else: yyvstack[yysp]}
    break;

case 103:
    /*! Production::    ifstatement : IF LPAREN e RPAREN statementbody */

    this.$ = {type: "if", condition: yyvstack[yysp - 2], body: yyvstack[yysp]}
    break;

case 104:
    /*! Production::    ifstatementelse : ELSE IF LPAREN e RPAREN statementbody ifstatementelse */

    this.$ = {type: "elseif", condition: yyvstack[yysp - 3], body: yyvstack[yysp - 1], else: yyvstack[yysp]}
    break;

case 105:
    /*! Production::    ifstatementelse : ELSE statementbody */

    this.$ = {type: "else", body: yyvstack[yysp]}
    break;

case 107:
    /*! Production::    forstatement : FOR LPAREN e SEMICOLON e SEMICOLON e RPAREN statementbody */

    this.$ = {type: "for", vardeclaration: yyvstack[yysp - 6], condition: yyvstack[yysp - 4], counter: yyvstack[yysp - 2], body: yyvstack[yysp]}
    break;

case 108:
    /*! Production::    whilestatement : WHILE LPAREN e RPAREN statementbody */

    this.$ = {type: "while", condition: yyvstack[yysp - 2], body: yyvstack[yysp]}
    break;

case 109:
    /*! Production::    dowhilestatement : DO statementbody WHILE LPAREN e RPAREN */

    this.$ = {type: "dowhile", condition: yyvstack[yysp - 1], body: yyvstack[yysp - 4]}
    break;

case 110:
    /*! Production::    switchstatement : SWITCH LPAREN e RPAREN LBRACE switchbody RBRACE */

    this.$ = {type: "switch", on: yyvstack[yysp - 4], body: yyvstack[yysp - 1]}
    break;

case 111:
    /*! Production::    switchbody : CASE switchcaselist COLON el switchbody */

    this.$ = [{type: "switchcase", caselist: yyvstack[yysp - 3], body: yyvstack[yysp - 1]}, yyvstack[yysp]]
    break;

case 112:
    /*! Production::    switchbody : DEFAULT COLON el */

    this.$ = {type: "switchdefault", body: yyvstack[yysp]}
    break;

case 114:
    /*! Production::    switchcaselist : e COMMA switchcaselist */

    this.$ = [{type: "switchcaselist", switchcase: yyvstack[yysp - 2]}, yyvstack[yysp]]
    break;

case 115:
    /*! Production::    switchcaselist : e */

    this.$ = {type: "switchcaselist", switchcase: yyvstack[yysp]}
    break;

case 116:
    /*! Production::    statementbody : LBRACE el RBRACE */
case 117:
    /*! Production::    statementbody : e SEMICOLON */

    this.$ = yyvstack[yysp - 1]
    break;

case 119:
    /*! Production::    trycatch : TRY statementbody */

    this.$ = {type: "try", trybody: yyvstack[yysp]}
    break;

case 120:
    /*! Production::    trycatch : TRY statementbody CATCH statementbody */

    this.$ = {type: "try", trybody: yyvstack[yysp - 2], catchbody: yyvstack[yysp]}
    break;

case 121:
    /*! Production::    trycatch : TRY statementbody CATCH LPAREN e RPAREN statementbody */

    this.$ = {type: "try", trybody: yyvstack[yysp - 5], catchcondition: yyvstack[yysp - 2], catchbody: yyvstack[yysp]}
    break;

case 124:
    /*! Production::    t : SYSTEM DOT t */
case 129:
    /*! Production::    systemref : ID DOT systemref */
case 172:
    /*! Production::    e : READNAT LPAREN RPAREN */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 2];
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-)
    break;

case 125:
    /*! Production::    t : SYSTEM DOT id DOT t */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 4];
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,-,-,-,-,-,-)
    break;

case 131:
    /*! Production::    enumstr : DO id */

    this.$ = yyvstack[yysp - 1] + yyvstack[yysp]
    break;

case 138:
    /*! Production::    id : ID */
case 169:
    /*! Production::    e : id */

    this.$ = {type: "id", id: yyvstack[yysp]}
    break;

case 139:
    /*! Production::    id : SYSTEM DOT systemref */

    this.$ = {type: "dotnetsystemcall", ref: yyvstack[yysp]}
    break;

case 140:
    /*! Production::    id : ID LBRACKET e RBRACKET */

    this.$ = {type: "arrayref", id: yyvstack[yysp - 3], index: yyvstack[yysp - 1]}
    break;

case 141:
    /*! Production::    el : ifstatement el */
case 142:
    /*! Production::    el : switchstatement el */
case 143:
    /*! Production::    el : forstatement el */
case 144:
    /*! Production::    el : whilestatement el */
case 145:
    /*! Production::    el : dowhilestatement el */
case 147:
    /*! Production::    el : whileselectstatement el */
case 148:
    /*! Production::    el : trycatch el */

    this.$ = [yyvstack[yysp - 1], yyvstack[yysp]]
    break;

case 149:
    /*! Production::    el : SQUARE id el */

    this.$ = [{type: "macroref", id: yyvstack[yysp - 1]}, yyvstack[yysp]]
    break;

case 150:
    /*! Production::    el : SQUARE MACROLIB DOT id el */

    this.$ = [{type: "macroref", id: yyvstack[yysp - 2]}, yyvstack[yysp]]
    break;

case 151:
    /*! Production::    el : SQUARE DEFINE DOT id LPAREN e RPAREN el */

    this.$ = [{type: "macrodef", id: yyvstack[yysp - 4], val: yyvstack[yysp - 2]}, yyvstack[yysp]]
    break;

case 152:
    /*! Production::    el : id methodname LPAREN methodvariables RPAREN LBRACE methodbody RBRACE el */
case 153:
    /*! Production::    el : NATVOID methodname LPAREN methodvariables RPAREN LBRACE methodbody RBRACE el */
case 154:
    /*! Production::    el : STR methodname LPAREN methodvariables RPAREN LBRACE methodbody RBRACE el */

    this.$ = [{type: "methodinner", name: yyvstack[yysp - 7], returns: yyvstack[yysp - 8], parms: yyvstack[yysp - 5], body: yyvstack[yysp - 2]}, yyvstack[yysp]]
    break;

case 155:
    /*! Production::    el : STR NATLITERAL methodname LPAREN methodvariables RPAREN LBRACE methodbody RBRACE el */

    this.$ = [{type: "methodinner", name: yyvstack[yysp - 7], returns: yyvstack[yysp - 9], strlen: yyvstack[yysp - 8], parms: yyvstack[yysp - 5], body: yyvstack[yysp - 2]}, yyvstack[yysp]]
    break;

case 156:
    /*! Production::    el : LBRACE el RBRACE el */

    this.$ = [{type: "scope", body: yyvstack[yysp - 2]}, yyvstack[yysp]]
    break;

case 159:
    /*! Production::    el : SEMICOLON el */

    this.$ = [{type: "empty"}, yyvstack[yysp]]
    break;

case 161:
    /*! Production::    el : vdl */

    this.$ = {type: "statement", e: yyvstack[yysp]}
    break;

case 163:
    /*! Production::    e : NATLITERAL */

    this.$ = {type: "literal", val: yyvstack[yysp]}
    break;

case 164:
    /*! Production::    e : HEXNUMBER */

    this.$ = {type: "literal", val: yyvstack[yysp].replace("u", "")}
    break;

case 165:
    /*! Production::    e : UTCDATE */

    this.$ = {type: "literal", val: 'new Date("' + yyvstack[yysp] + '")'}
    break;

case 166:
    /*! Production::    e : STRING */
case 167:
    /*! Production::    e : STRING2 */

    this.$ = {type: "literal", val: yyvstack[yysp].substring(0, 1) == "@" ? yyvstack[yysp].substring(1) : yyvstack[yysp]}
    break;

case 168:
    /*! Production::    e : NULL */

    this.$ = {type: "literal", val: "null"}
    break;

case 170:
    /*! Production::    e : NEW e */

    this.$ = {type: "new", e: yyvstack[yysp]}
    break;

case 171:
    /*! Production::    e : THIS */

    this.$ = {type: "literal", val: "this"}
    break;

case 174:
    /*! Production::    e : MINUS e */

    this.$ = {type: "negative", e: yyvstack[yysp]}
    break;

case 175:
    /*! Production::    e : PLUS e */

    this.$ = {type: "positive", e: yyvstack[yysp]}
    break;

case 176:
    /*! Production::    e : NOT e */

    this.$ = {type: "negation", e: yyvstack[yysp]}
    break;

case 177:
    /*! Production::    e : UNARY e */

    this.$ = {type: "unary", e: yyvstack[yysp]}
    break;

case 178:
    /*! Production::    e : e GREATERTHAN e */

    this.$ = {type: "greaterequals", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 179:
    /*! Production::    e : e LESSTHAN e */

    this.$ = {type: "lessequals", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 180:
    /*! Production::    e : e PLUS e */

    this.$ = {type: "plus", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 181:
    /*! Production::    e : e MINUS e */

    this.$ = {type: "minus", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 182:
    /*! Production::    e : e TIMES e */

    this.$ = {type: "times", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 183:
    /*! Production::    e : e SLASH e */

    this.$ = {type: "divide", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 184:
    /*! Production::    e : e MOD e */

    this.$ = {type: "mod", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 185:
    /*! Production::    e : e DIV e */

    this.$ = {type: "div", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 186:
    /*! Production::    e : e EQUALITY e */

    this.$ = {type: "equals", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 187:
    /*! Production::    e : e NOTEQUALS e */

    this.$ = {type: "notequals", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 188:
    /*! Production::    e : e GREATER e */

    this.$ = {type: "greater", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 189:
    /*! Production::    e : e LESS e */

    this.$ = {type: "less", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 190:
    /*! Production::    e : e BITAND e */

    this.$ = {type: "bitand", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 191:
    /*! Production::    e : e BITOR e */

    this.$ = {type: "bitor", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 192:
    /*! Production::    e : e BITLEFT e */

    this.$ = {type: "bitleft", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 193:
    /*! Production::    e : e BITRIGHT e */

    this.$ = {type: "bitright", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 194:
    /*! Production::    e : e PLUS PLUS */

    this.$ = {type: "plusplus", e: yyvstack[yysp - 2]}
    break;

case 195:
    /*! Production::    e : e MINUS MINUS */

    this.$ = {type: "minusminus", e: yyvstack[yysp - 2]}
    break;

case 196:
    /*! Production::    e : e OR e */

    this.$ = {type: "or", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 197:
    /*! Production::    e : e AND e */

    this.$ = {type: "and", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 198:
    /*! Production::    e : e DOT id */

    this.$ = {type: "memberref", element: yyvstack[yysp - 2], ref: yyvstack[yysp]}
    break;

case 199:
    /*! Production::    e : NEXT id */

    this.$ = {type: "selectnext", element: yyvstack[yysp]}
    break;

case 200:
    /*! Production::    e : THROW e */

    this.$ = {type: "throw", e: yyvstack[yysp]}
    break;

case 201:
    /*! Production::    e : RETURN e */

    this.$ = {type: "return", e: yyvstack[yysp]}
    break;

case 202:
    /*! Production::    e : RETURN */

    this.$ = {type: "return"}
    break;

case 203:
    /*! Production::    e : BREAK */

    this.$ = {type: "literal", val: "break"}
    break;

case 204:
    /*! Production::    e : id ASSIGN e */
case 205:
    /*! Production::    e : container ASSIGN e */

    this.$ = {type: "assign", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 206:
    /*! Production::    e : id PLUSASSIGN e */

    this.$ = {type: "plusassign", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 207:
    /*! Production::    e : id NEGASSIGN e */

    this.$ = {type: "negassign", left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 208:
    /*! Production::    e : e DOT id ASSIGN e */

    this.$ = {type: "assign", leftelement: yyvstack[yysp - 4], left: yyvstack[yysp - 2], right: yyvstack[yysp]}
    break;

case 209:
    /*! Production::    e : id LPAREN methodcallparams RPAREN */

    this.$ = {type: "methodcall", method: yyvstack[yysp - 3], parameters: yyvstack[yysp - 1]}
    break;

case 210:
    /*! Production::    e : id DOUBLECOLON id LPAREN methodcallparams RPAREN */

    this.$ = {type: "methodcall", method: yyvstack[yysp - 3], isStaticCall: true, element: yyvstack[yysp - 5], parameters: yyvstack[yysp - 1]}
    break;

case 211:
    /*! Production::    e : id DOUBLECOLON enumstr */

    this.$ = {type: "enumval", enum: yyvstack[yysp - 2], val: yyvstack[yysp]}
    break;

case 212:
    /*! Production::    e : e DOT methodname LPAREN methodcallparams RPAREN */

    this.$ = {type: "methodcall", element: yyvstack[yysp - 5], method: yyvstack[yysp - 3], parameters: yyvstack[yysp - 1]}
    break;

case 213:
    /*! Production::    e : e DOT LPAREN methodcallparams RPAREN ASSIGN e */

    this.$ = {type: "fieldrefbyidassign", element: yyvstack[yysp - 6], idexpression: yyvstack[yysp - 3], assign: yyvstack[yysp]}
    break;

case 214:
    /*! Production::    e : e DOT LPAREN methodcallparams RPAREN */

    this.$ = {type: "fieldrefbyid", element: yyvstack[yysp - 4], idexpression: yyvstack[yysp - 1]}
    break;

case 215:
    /*! Production::    e : LPAREN e RPAREN */

    this.$ = {type: "paran", content: yyvstack[yysp - 1]}
    break;

case 218:
    /*! Production::    e : e QUESTIONMARK e COLON e */

    this.$ = {type: "onelineif", condition: yyvstack[yysp - 4], trueval: yyvstack[yysp - 2], falseval: yyvstack[yysp]}
    break;

case 219:
    /*! Production::    e : NATLITERAL BACKSLASH NATLITERAL BACKSLASH NATLITERAL */

    this.$ = {type: "literal", val: 'new Date(' + parseInt(yyvstack[yysp]) + ',' + parseInt(yyvstack[yysp - 2]) + ',' + parseInt(yyvstack[yysp - 4]) + ')'}
    break;

case 220:
    /*! Production::    e : SQUARE id */

    this.$ = {type: "macroref", id: yyvstack[yysp]}
    break;

}
},
table: bt({
  len: u([
  22,
  1,
  1,
  0,
  0,
  16,
  6,
  10,
  3,
  4,
  6,
  2,
  10,
  10,
  s,
  [0, 8],
  9,
  0,
  0,
  1,
  26,
  81,
  3,
  3,
  1,
  14,
  1,
  0,
  1,
  0,
  1,
  s,
  [5, 4],
  2,
  c,
  [10, 4],
  s,
  [0, 5],
  7,
  0,
  26,
  3,
  1,
  3,
  2,
  0,
  3,
  s,
  [0, 4],
  s,
  [1, 3],
  c,
  [47, 4],
  27,
  0,
  52,
  21,
  33,
  s,
  [0, 5],
  37,
  26,
  c,
  [20, 3],
  s,
  [26, 4],
  3,
  26,
  56,
  0,
  33,
  26,
  28,
  3,
  1,
  49,
  0,
  81,
  c,
  [58, 4],
  2,
  26,
  6,
  2,
  0,
  s,
  [26, 18],
  10,
  26,
  c,
  [46, 4],
  28,
  11,
  32,
  1,
  26,
  s,
  [32, 4],
  0,
  32,
  32,
  26,
  21,
  22,
  1,
  0,
  49,
  1,
  s,
  [51, 5],
  c,
  [6, 3],
  5,
  38,
  9,
  10,
  49,
  24,
  51,
  4,
  s,
  [1, 3],
  2,
  s,
  [30, 3],
  3,
  26,
  1,
  9,
  22,
  0,
  c,
  [39, 3],
  32,
  56,
  32,
  56,
  s,
  [32, 4],
  30,
  32,
  30,
  s,
  [32, 7],
  34,
  1,
  28,
  21,
  1,
  s,
  [32, 3],
  1,
  22,
  33,
  c,
  [157, 6],
  s,
  [0, 3],
  21,
  32,
  0,
  0,
  28,
  c,
  [186, 8],
  51,
  0,
  0,
  69,
  s,
  [1, 3],
  7,
  1,
  1,
  9,
  7,
  1,
  51,
  0,
  51,
  s,
  [26, 4],
  30,
  1,
  49,
  21,
  0,
  3,
  27,
  1,
  35,
  0,
  22,
  38,
  6,
  21,
  50,
  2,
  26,
  28,
  1,
  26,
  1,
  0,
  28,
  28,
  s,
  [0, 3],
  c,
  [103, 3],
  0,
  4,
  3,
  3,
  9,
  26,
  4,
  9,
  9,
  1,
  7,
  26,
  4,
  c,
  [63, 3],
  s,
  [21, 4],
  3,
  c,
  [243, 3],
  30,
  1,
  1,
  35,
  3,
  7,
  3,
  27,
  30,
  26,
  4,
  c,
  [291, 3],
  32,
  1,
  33,
  c,
  [103, 3],
  1,
  51,
  1,
  2,
  24,
  0,
  6,
  2,
  2,
  c,
  [49, 3],
  24,
  0,
  c,
  [35, 3],
  26,
  30,
  49,
  26,
  0,
  4,
  30,
  3,
  7,
  8,
  6,
  c,
  [129, 4],
  26,
  c,
  [21, 3],
  c,
  [6, 3],
  c,
  [3, 3],
  1,
  4,
  26,
  c,
  [205, 3],
  24,
  0,
  40,
  4,
  21,
  0,
  1,
  21,
  4,
  8,
  6,
  c,
  [339, 3],
  4,
  21,
  32,
  21,
  50,
  0,
  25,
  50,
  50,
  c,
  [93, 4],
  27,
  1,
  c,
  [39, 3],
  7,
  0,
  6,
  24,
  0,
  9,
  49,
  51,
  1,
  c,
  [251, 3],
  c,
  [22, 3],
  0,
  1,
  22,
  49,
  21,
  6,
  0,
  6,
  s,
  [0, 4],
  c,
  [139, 3],
  c,
  [284, 3],
  26,
  51,
  27,
  0,
  30,
  0,
  4,
  c,
  [217, 4],
  21,
  c,
  [6, 4],
  c,
  [13, 3],
  40,
  0
]),
  symbol: u([
  4,
  5,
  11,
  13,
  19,
  20,
  21,
  s,
  [27, 4, 1],
  53,
  54,
  55,
  92,
  93,
  94,
  97,
  99,
  100,
  104,
  105,
  1,
  3,
  4,
  11,
  c,
  [22, 10],
  c,
  [18, 4],
  11,
  c,
  [8, 3],
  129,
  132,
  5,
  c,
  [22, 4],
  c,
  [20, 5],
  54,
  55,
  132,
  16,
  c,
  [4, 3],
  11,
  20,
  21,
  c,
  [13, 3],
  19,
  20,
  c,
  [47, 3],
  c,
  [46, 3],
  c,
  [11, 3],
  104,
  c,
  [34, 9],
  105,
  s,
  [22, 5, 1],
  54,
  55,
  101,
  132,
  15,
  12,
  13,
  17,
  c,
  [13, 5],
  40,
  s,
  [54, 14, 1],
  84,
  85,
  86,
  4,
  s,
  [6, 8, 1],
  15,
  s,
  [17, 20, 1],
  s,
  [38, 5, 1],
  s,
  [44, 8, 1],
  s,
  [53, 38, 1],
  c,
  [148, 3],
  6,
  8,
  95,
  15,
  4,
  c,
  [214, 12],
  97,
  15,
  20,
  20,
  11,
  19,
  c,
  [9, 3],
  11,
  c,
  [173, 4],
  c,
  [5, 10],
  19,
  20,
  20,
  17,
  c,
  [216, 5],
  130,
  132,
  c,
  [162, 3],
  24,
  25,
  c,
  [159, 18],
  117,
  132,
  134,
  c,
  [78, 3],
  6,
  c,
  [85, 3],
  55,
  130,
  c,
  [5, 3],
  19,
  19,
  20,
  10,
  11,
  18,
  c,
  [50, 3],
  102,
  129,
  c,
  [50, 3],
  15,
  c,
  [213, 24],
  7,
  9,
  c,
  [29, 10],
  45,
  48,
  50,
  c,
  [184, 37],
  15,
  41,
  64,
  65,
  c,
  [27, 16],
  90,
  6,
  7,
  10,
  15,
  18,
  22,
  23,
  33,
  41,
  45,
  c,
  [257, 3],
  c,
  [32, 19],
  91,
  6,
  7,
  9,
  10,
  c,
  [314, 3],
  c,
  [35, 26],
  c,
  [91, 4],
  c,
  [220, 26],
  17,
  17,
  c,
  [28, 26],
  c,
  [26, 78],
  c,
  [317, 3],
  c,
  [355, 27],
  7,
  10,
  c,
  [513, 5],
  c,
  [306, 4],
  33,
  40,
  c,
  [202, 5],
  c,
  [308, 33],
  90,
  c,
  [56, 5],
  c,
  [254, 3],
  c,
  [288, 28],
  c,
  [170, 32],
  41,
  c,
  [27, 18],
  118,
  c,
  [172, 5],
  6,
  6,
  7,
  c,
  [660, 3],
  c,
  [35, 3],
  31,
  32,
  40,
  c,
  [641, 5],
  c,
  [638, 16],
  c,
  [43, 3],
  96,
  107,
  108,
  117,
  119,
  s,
  [121, 4, 1],
  128,
  129,
  132,
  133,
  134,
  c,
  [713, 81],
  17,
  10,
  18,
  c,
  [191, 26],
  c,
  [910, 6],
  55,
  130,
  c,
  [447, 104],
  c,
  [26, 364],
  c,
  [1081, 6],
  c,
  [1336, 4],
  c,
  [62, 27],
  c,
  [141, 81],
  18,
  c,
  [27, 20],
  103,
  c,
  [28, 3],
  5,
  19,
  c,
  [1487, 3],
  46,
  c,
  [624, 3],
  131,
  132,
  c,
  [1167, 32],
  c,
  [689, 27],
  c,
  [59, 32],
  c,
  [32, 160],
  c,
  [218, 26],
  15,
  18,
  c,
  [47, 19],
  10,
  c,
  [1487, 21],
  41,
  c,
  [1110, 49],
  7,
  c,
  [50, 16],
  48,
  c,
  [1087, 17],
  c,
  [52, 17],
  c,
  [51, 204],
  45,
  c,
  [103, 102],
  14,
  c,
  [2251, 4],
  7,
  9,
  c,
  [1972, 7],
  c,
  [1971, 5],
  c,
  [1867, 22],
  101,
  132,
  c,
  [925, 10],
  c,
  [10, 9],
  c,
  [470, 50],
  15,
  c,
  [99, 3],
  c,
  [645, 21],
  c,
  [186, 49],
  7,
  c,
  [74, 3],
  s,
  [17, 4],
  31,
  6,
  c,
  [674, 6],
  42,
  c,
  [675, 18],
  119,
  127,
  c,
  [1019, 7],
  c,
  [2218, 19],
  109,
  110,
  113,
  c,
  [925, 4],
  c,
  [60, 29],
  c,
  [1979, 30],
  c,
  [2320, 9],
  c,
  [832, 3],
  c,
  [952, 118],
  c,
  [2107, 55],
  c,
  [88, 121],
  c,
  [32, 114],
  75,
  c,
  [62, 123],
  c,
  [32, 173],
  c,
  [2893, 31],
  90,
  c,
  [2863, 4],
  c,
  [1833, 25],
  15,
  49,
  c,
  [2978, 22],
  c,
  [181, 94],
  18,
  c,
  [888, 26],
  c,
  [203, 29],
  c,
  [982, 3],
  c,
  [945, 53],
  c,
  [2873, 28],
  c,
  [1710, 57],
  15,
  c,
  [52, 29],
  c,
  [875, 20],
  c,
  [69, 14],
  15,
  15,
  17,
  c,
  [444, 3],
  17,
  c,
  [1292, 5],
  c,
  [1431, 9],
  c,
  [18, 7],
  c,
  [1859, 103],
  c,
  [2616, 109],
  c,
  [1482, 25],
  32,
  c,
  [1676, 49],
  15,
  45,
  c,
  [485, 19],
  23,
  33,
  45,
  c,
  [130, 23],
  110,
  c,
  [101, 3],
  22,
  6,
  c,
  [808, 4],
  c,
  [548, 3],
  c,
  [3289, 3],
  c,
  [62, 19],
  c,
  [1832, 4],
  112,
  10,
  15,
  22,
  c,
  [1761, 38],
  s,
  [52, 16, 1],
  c,
  [3903, 5],
  10,
  c,
  [440, 3],
  c,
  [670, 23],
  c,
  [223, 34],
  106,
  c,
  [224, 13],
  c,
  [3398, 28],
  c,
  [974, 28],
  c,
  [55, 28],
  c,
  [56, 28],
  c,
  [28, 28],
  c,
  [2582, 22],
  c,
  [1987, 4],
  c,
  [910, 3],
  c,
  [3, 3],
  c,
  [4188, 11],
  c,
  [3912, 26],
  98,
  c,
  [39, 10],
  c,
  [9, 9],
  c,
  [766, 8],
  c,
  [56, 30],
  c,
  [726, 51],
  c,
  [389, 21],
  c,
  [21, 22],
  c,
  [584, 20],
  c,
  [452, 22],
  23,
  33,
  17,
  7,
  c,
  [711, 30],
  33,
  c,
  [611, 36],
  c,
  [4007, 4],
  c,
  [33, 3],
  36,
  45,
  114,
  c,
  [2210, 26],
  c,
  [687, 4],
  c,
  [2330, 35],
  c,
  [307, 25],
  c,
  [4679, 14],
  c,
  [1099, 3],
  c,
  [1421, 31],
  c,
  [4242, 33],
  c,
  [66, 35],
  c,
  [421, 49],
  c,
  [4138, 3],
  c,
  [2642, 24],
  c,
  [843, 6],
  10,
  18,
  10,
  18,
  c,
  [604, 39],
  c,
  [2715, 25],
  c,
  [325, 29],
  c,
  [30, 7],
  c,
  [2593, 21],
  c,
  [57, 30],
  c,
  [1199, 48],
  c,
  [105, 27],
  c,
  [1205, 8],
  c,
  [598, 25],
  c,
  [561, 10],
  c,
  [7, 4],
  c,
  [601, 3],
  112,
  c,
  [8, 4],
  45,
  111,
  37,
  c,
  [85, 26],
  c,
  [271, 24],
  c,
  [1466, 52],
  c,
  [5190, 3],
  98,
  c,
  [2890, 28],
  6,
  c,
  [455, 26],
  c,
  [295, 12],
  s,
  [43, 6, 1],
  c,
  [1337, 21],
  120,
  7,
  48,
  50,
  125,
  c,
  [905, 21],
  7,
  c,
  [906, 24],
  45,
  c,
  [267, 14],
  c,
  [288, 7],
  c,
  [548, 28],
  115,
  c,
  [2104, 54],
  c,
  [1487, 71],
  c,
  [102, 3],
  c,
  [3388, 38],
  c,
  [75, 34],
  c,
  [50, 51],
  c,
  [717, 30],
  c,
  [1237, 6],
  c,
  [311, 19],
  126,
  132,
  134,
  49,
  c,
  [697, 29],
  c,
  [660, 8],
  c,
  [385, 3],
  15,
  c,
  [404, 3],
  c,
  [223, 20],
  10,
  c,
  [31, 3],
  38,
  39,
  45,
  116,
  c,
  [131, 3],
  c,
  [2350, 4],
  40,
  42,
  45,
  c,
  [3216, 35],
  c,
  [867, 20],
  c,
  [3669, 36],
  c,
  [1034, 5],
  c,
  [2361, 17],
  c,
  [289, 34],
  17,
  49,
  10,
  c,
  [2822, 21],
  c,
  [2198, 50],
  c,
  [687, 23],
  c,
  [290, 4],
  c,
  [266, 4],
  45,
  c,
  [1845, 4],
  c,
  [4278, 153],
  c,
  [521, 25],
  c,
  [398, 53],
  c,
  [598, 27],
  c,
  [4025, 32],
  115,
  c,
  [2036, 73],
  c,
  [1114, 4],
  c,
  [1483, 42],
  c,
  [1188, 28]
]),
  type: u([
  s,
  [2, 14],
  s,
  [0, 8],
  1,
  c,
  [22, 17],
  c,
  [8, 6],
  c,
  [22, 13],
  c,
  [4, 7],
  c,
  [66, 15],
  c,
  [10, 17],
  c,
  [54, 14],
  s,
  [2, 98],
  c,
  [111, 3],
  c,
  [114, 15],
  c,
  [129, 32],
  c,
  [223, 7],
  c,
  [26, 24],
  c,
  [233, 6],
  c,
  [87, 13],
  c,
  [50, 26],
  s,
  [2, 170],
  c,
  [196, 28],
  c,
  [274, 31],
  c,
  [326, 56],
  c,
  [135, 48],
  c,
  [191, 56],
  c,
  [59, 58],
  c,
  [747, 6],
  c,
  [90, 37],
  s,
  [0, 14],
  c,
  [441, 114],
  c,
  [6, 3],
  c,
  [421, 81],
  c,
  [26, 396],
  c,
  [62, 51],
  c,
  [141, 79],
  c,
  [1529, 9],
  c,
  [1480, 63],
  c,
  [1326, 196],
  c,
  [218, 104],
  c,
  [1110, 52],
  c,
  [52, 51],
  c,
  [51, 204],
  c,
  [103, 70],
  c,
  [1524, 39],
  c,
  [781, 17],
  c,
  [113, 37],
  c,
  [1580, 75],
  c,
  [75, 48],
  c,
  [39, 29],
  c,
  [69, 31],
  c,
  [30, 7],
  c,
  [1082, 34],
  c,
  [994, 174],
  c,
  [174, 88],
  c,
  [1256, 218],
  s,
  [2, 288],
  c,
  [2562, 111],
  c,
  [3368, 72],
  c,
  [258, 117],
  c,
  [1292, 69],
  c,
  [69, 33],
  c,
  [90, 47],
  c,
  [1706, 88],
  c,
  [26, 104],
  c,
  [1482, 32],
  c,
  [384, 72],
  c,
  [51, 39],
  c,
  [781, 123],
  s,
  [0, 15],
  c,
  [3589, 58],
  c,
  [3894, 53],
  c,
  [84, 53],
  c,
  [4278, 14],
  c,
  [3912, 32],
  c,
  [39, 16],
  c,
  [402, 34],
  c,
  [56, 13],
  c,
  [3798, 152],
  c,
  [711, 49],
  c,
  [305, 10],
  c,
  [2210, 29],
  c,
  [2270, 33],
  c,
  [307, 41],
  c,
  [1506, 138],
  c,
  [421, 57],
  c,
  [241, 46],
  c,
  [139, 41],
  c,
  [813, 56],
  c,
  [2875, 73],
  c,
  [861, 32],
  c,
  [2761, 14],
  c,
  [2742, 9],
  c,
  [471, 30],
  c,
  [1310, 53],
  c,
  [26, 29],
  c,
  [192, 56],
  c,
  [2002, 43],
  c,
  [72, 55],
  c,
  [267, 13],
  c,
  [548, 80],
  c,
  [1487, 100],
  c,
  [75, 85],
  c,
  [50, 41],
  c,
  [3429, 33],
  c,
  [562, 33],
  c,
  [652, 31],
  c,
  [1156, 53],
  c,
  [2252, 59],
  c,
  [56, 53],
  c,
  [414, 60],
  c,
  [362, 41],
  c,
  [1323, 98],
  c,
  [51, 89],
  c,
  [2650, 80],
  c,
  [4025, 34],
  c,
  [190, 77],
  c,
  [616, 67],
  c,
  [44, 3]
]),
  state: u([
  1,
  2,
  4,
  5,
  3,
  6,
  13,
  14,
  20,
  c,
  [4, 3],
  22,
  23,
  29,
  31,
  39,
  43,
  44,
  45,
  54,
  55,
  58,
  70,
  72,
  71,
  94,
  81,
  74,
  98,
  100,
  72,
  102,
  106,
  107,
  23,
  94,
  81,
  137,
  94,
  81,
  140,
  94,
  81,
  141,
  94,
  81,
  142,
  94,
  81,
  143,
  144,
  94,
  81,
  145,
  94,
  81,
  146,
  94,
  81,
  148,
  94,
  150,
  81,
  149,
  151,
  169,
  159,
  160,
  94,
  154,
  156,
  157,
  158,
  155,
  161,
  177,
  163,
  153,
  167,
  94,
  81,
  181,
  182,
  23,
  183,
  94,
  81,
  184,
  94,
  81,
  185,
  94,
  81,
  186,
  94,
  81,
  188,
  94,
  81,
  190,
  94,
  81,
  191,
  94,
  81,
  192,
  94,
  81,
  193,
  94,
  81,
  194,
  94,
  81,
  195,
  94,
  81,
  196,
  94,
  81,
  197,
  94,
  81,
  198,
  94,
  81,
  199,
  94,
  81,
  200,
  94,
  81,
  201,
  94,
  81,
  202,
  94,
  81,
  203,
  205,
  204,
  94,
  81,
  207,
  94,
  81,
  209,
  94,
  81,
  210,
  94,
  81,
  211,
  212,
  94,
  81,
  213,
  215,
  214,
  94,
  81,
  224,
  94,
  81,
  225,
  c,
  [100, 12],
  230,
  167,
  c,
  [14, 12],
  232,
  c,
  [14, 13],
  233,
  c,
  [14, 13],
  234,
  c,
  [14, 13],
  235,
  c,
  [14, 13],
  236,
  c,
  [14, 13],
  238,
  c,
  [14, 13],
  239,
  167,
  240,
  243,
  244,
  245,
  45,
  246,
  248,
  c,
  [21, 12],
  249,
  c,
  [35, 13],
  251,
  167,
  94,
  261,
  258,
  81,
  260,
  262,
  264,
  263,
  94,
  265,
  267,
  94,
  261,
  268,
  81,
  260,
  269,
  94,
  81,
  270,
  272,
  c,
  [300, 4],
  c,
  [294, 3],
  140,
  275,
  c,
  [188, 3],
  281,
  94,
  283,
  81,
  284,
  c,
  [52, 12],
  286,
  167,
  288,
  c,
  [14, 11],
  287,
  167,
  296,
  297,
  c,
  [30, 12],
  301,
  c,
  [96, 13],
  302,
  c,
  [329, 3],
  303,
  94,
  81,
  304,
  94,
  81,
  305,
  94,
  81,
  306,
  307,
  c,
  [103, 5],
  c,
  [32, 12],
  309,
  167,
  313,
  94,
  314,
  267,
  316,
  169,
  323,
  c,
  [20, 11],
  324,
  c,
  [52, 3],
  325,
  326,
  c,
  [122, 3],
  94,
  81,
  328,
  330,
  c,
  [7, 3],
  331,
  c,
  [4, 3],
  332,
  333,
  334,
  c,
  [148, 4],
  s,
  [335, 4, 1],
  107,
  23,
  339,
  c,
  [11, 4],
  343,
  344,
  337,
  c,
  [73, 12],
  345,
  167,
  353,
  c,
  [93, 5],
  356,
  357,
  358,
  360,
  361,
  94,
  81,
  c,
  [204, 3],
  362,
  81,
  260,
  94,
  81,
  364,
  365,
  337,
  366,
  c,
  [39, 12],
  371,
  167,
  378,
  c,
  [61, 4],
  379,
  380,
  337,
  94,
  261,
  381,
  c,
  [33, 4],
  383,
  94,
  261,
  384,
  81,
  260,
  c,
  [35, 12],
  385,
  c,
  [127, 3],
  386,
  387,
  c,
  [77, 5],
  s,
  [388, 4, 1],
  94,
  81,
  394,
  94,
  81,
  395,
  94,
  81,
  396,
  398,
  337,
  94,
  81,
  399,
  403,
  405,
  411,
  412,
  413,
  94,
  81,
  414,
  415,
  416,
  169,
  419,
  c,
  [179, 13],
  169,
  421,
  c,
  [15, 14],
  422,
  c,
  [209, 14],
  261,
  425,
  c,
  [109, 3],
  427,
  81,
  428,
  94,
  81,
  s,
  [430, 4, 1],
  94,
  261,
  436,
  81,
  260,
  438,
  c,
  [34, 11],
  437,
  167,
  440,
  337,
  169,
  443,
  c,
  [66, 14],
  c,
  [14, 11],
  447,
  167,
  449,
  c,
  [15, 12],
  451,
  c,
  [29, 13],
  452,
  c,
  [14, 13],
  453,
  c,
  [190, 3],
  455,
  c,
  [17, 12],
  456,
  167,
  94,
  457,
  c,
  [120, 3],
  261,
  458,
  81,
  260,
  459,
  416,
  c,
  [25, 12],
  460,
  167,
  462,
  94,
  261,
  463,
  81,
  260,
  464
]),
  mode: u([
  1,
  1,
  2,
  s,
  [1, 8],
  s,
  [2, 3],
  c,
  [14, 10],
  c,
  [13, 5],
  c,
  [8, 6],
  s,
  [2, 6],
  c,
  [14, 6],
  c,
  [25, 8],
  c,
  [15, 5],
  c,
  [23, 10],
  c,
  [8, 7],
  c,
  [49, 13],
  s,
  [2, 48],
  c,
  [58, 49],
  c,
  [143, 7],
  c,
  [56, 11],
  c,
  [153, 5],
  c,
  [76, 9],
  c,
  [5, 9],
  s,
  [1, 31],
  c,
  [32, 11],
  c,
  [47, 3],
  c,
  [195, 5],
  c,
  [140, 29],
  c,
  [29, 7],
  c,
  [176, 41],
  c,
  [117, 22],
  c,
  [270, 34],
  c,
  [136, 31],
  c,
  [186, 14],
  s,
  [1, 132],
  c,
  [404, 7],
  c,
  [7, 10],
  c,
  [252, 16],
  c,
  [195, 20],
  c,
  [329, 33],
  c,
  [444, 40],
  c,
  [22, 33],
  c,
  [138, 21],
  c,
  [688, 58],
  c,
  [166, 43],
  s,
  [1, 520],
  c,
  [716, 31],
  c,
  [654, 12],
  c,
  [887, 47],
  c,
  [650, 17],
  c,
  [1226, 6],
  c,
  [1458, 9],
  c,
  [32, 45],
  c,
  [1352, 7],
  c,
  [32, 21],
  c,
  [184, 51],
  c,
  [216, 56],
  c,
  [346, 74],
  c,
  [36, 21],
  c,
  [140, 22],
  c,
  [37, 148],
  c,
  [75, 76],
  c,
  [474, 10],
  c,
  [1448, 7],
  c,
  [1624, 37],
  c,
  [1361, 35],
  c,
  [151, 60],
  c,
  [1771, 5],
  c,
  [901, 106],
  c,
  [736, 12],
  c,
  [715, 78],
  c,
  [875, 36],
  c,
  [1826, 25],
  c,
  [399, 20],
  c,
  [2406, 8],
  c,
  [85, 98],
  c,
  [1013, 111],
  c,
  [32, 27],
  c,
  [126, 62],
  c,
  [188, 126],
  c,
  [32, 66],
  c,
  [192, 37],
  c,
  [2230, 32],
  c,
  [1299, 40],
  c,
  [241, 103],
  c,
  [142, 23],
  c,
  [2432, 33],
  c,
  [1833, 61],
  c,
  [1129, 22],
  c,
  [1353, 39],
  c,
  [25, 12],
  c,
  [420, 19],
  c,
  [1331, 22],
  c,
  [875, 7],
  c,
  [459, 15],
  c,
  [3413, 11],
  c,
  [1472, 69],
  c,
  [2231, 144],
  c,
  [57, 52],
  c,
  [3292, 9],
  c,
  [511, 21],
  c,
  [315, 7],
  c,
  [3382, 38],
  c,
  [20, 21],
  c,
  [3574, 26],
  c,
  [204, 35],
  c,
  [35, 27],
  c,
  [266, 49],
  c,
  [1925, 26],
  c,
  [692, 43],
  c,
  [976, 8],
  c,
  [126, 29],
  c,
  [1751, 13],
  c,
  [650, 16],
  c,
  [621, 168],
  c,
  [536, 37],
  c,
  [31, 5],
  c,
  [3767, 77],
  c,
  [4163, 12],
  c,
  [1117, 33],
  c,
  [3636, 36],
  c,
  [1183, 31],
  c,
  [382, 39],
  c,
  [4285, 24],
  c,
  [736, 10],
  c,
  [532, 34],
  c,
  [474, 96],
  c,
  [1052, 60],
  c,
  [672, 28],
  c,
  [325, 9],
  c,
  [6, 8],
  c,
  [228, 123],
  c,
  [393, 26],
  c,
  [4799, 39],
  c,
  [281, 49],
  c,
  [255, 42],
  c,
  [3659, 76],
  c,
  [3046, 39],
  c,
  [1726, 36],
  c,
  [555, 77],
  c,
  [4747, 54],
  c,
  [1097, 9],
  c,
  [445, 28],
  c,
  [2030, 12],
  c,
  [4781, 35],
  c,
  [1336, 43],
  c,
  [238, 38],
  c,
  [332, 56],
  c,
  [501, 26],
  c,
  [567, 9],
  c,
  [3750, 113],
  c,
  [1643, 110],
  c,
  [87, 57],
  c,
  [41, 28],
  c,
  [977, 39]
]),
  goto: u([
  7,
  8,
  28,
  9,
  10,
  12,
  11,
  s,
  [15, 4, 1],
  s,
  [28, 3],
  19,
  21,
  54,
  c,
  [13, 7],
  s,
  [54, 3],
  26,
  24,
  25,
  27,
  28,
  s,
  [68, 9],
  30,
  27,
  32,
  30,
  27,
  34,
  33,
  s,
  [34, 4],
  36,
  35,
  21,
  45,
  38,
  37,
  15,
  16,
  s,
  [45, 3],
  46,
  42,
  40,
  41,
  17,
  18,
  s,
  [46, 4],
  s,
  [47, 4, 1],
  30,
  27,
  51,
  52,
  s,
  [127, 25],
  s,
  [138, 32],
  53,
  s,
  [138, 48],
  30,
  27,
  8,
  56,
  57,
  28,
  28,
  9,
  s,
  [28, 10],
  59,
  60,
  61,
  39,
  62,
  s,
  [39, 3],
  41,
  63,
  s,
  [41, 3],
  43,
  64,
  s,
  [43, 3],
  47,
  65,
  s,
  [47, 3],
  s,
  [66, 4, 1],
  c,
  [205, 3],
  73,
  75,
  97,
  95,
  90,
  82,
  96,
  30,
  27,
  s,
  [76, 5, 1],
  s,
  [83, 7, 1],
  91,
  92,
  93,
  8,
  56,
  99,
  30,
  27,
  101,
  30,
  27,
  103,
  104,
  105,
  63,
  26,
  63,
  c,
  [245, 3],
  122,
  122,
  108,
  s,
  [122, 24],
  128,
  128,
  138,
  138,
  109,
  c,
  [176, 7],
  s,
  [128, 3],
  s,
  [138, 14],
  s,
  [128, 16],
  c,
  [19, 7],
  129,
  110,
  114,
  113,
  111,
  112,
  s,
  [115, 14, 1],
  130,
  s,
  [163, 32],
  131,
  169,
  169,
  132,
  169,
  169,
  135,
  s,
  [169, 27],
  133,
  134,
  136,
  169,
  c,
  [210, 23],
  138,
  139,
  c,
  [25, 23],
  c,
  [23, 69],
  30,
  27,
  c,
  [25, 23],
  s,
  [202, 3],
  75,
  97,
  202,
  95,
  s,
  [202, 3],
  90,
  82,
  202,
  96,
  s,
  [202, 5],
  c,
  [36, 14],
  s,
  [202, 16],
  c,
  [52, 4],
  217,
  217,
  147,
  s,
  [217, 30],
  c,
  [157, 29],
  c,
  [439, 3],
  c,
  [158, 17],
  152,
  166,
  162,
  165,
  75,
  162,
  c,
  [30, 3],
  175,
  173,
  96,
  170,
  172,
  168,
  174,
  171,
  176,
  164,
  25,
  c,
  [38, 16],
  s,
  [128, 9],
  109,
  s,
  [128, 71],
  178,
  180,
  179,
  c,
  [169, 23],
  c,
  [839, 4],
  101,
  c,
  [377, 63],
  187,
  c,
  [23, 21],
  189,
  c,
  [469, 75],
  c,
  [23, 253],
  206,
  c,
  [1214, 7],
  c,
  [31, 23],
  208,
  c,
  [124, 72],
  66,
  c,
  [24, 20],
  220,
  218,
  217,
  221,
  222,
  216,
  219,
  30,
  27,
  s,
  [170, 3],
  129,
  s,
  [170, 9],
  c,
  [1075, 19],
  223,
  c,
  [89, 23],
  s,
  [174, 3],
  129,
  s,
  [174, 11],
  c,
  [56, 6],
  174,
  120,
  174,
  c,
  [56, 5],
  174,
  128,
  130,
  s,
  [175, 3],
  129,
  s,
  [175, 11],
  c,
  [32, 6],
  175,
  120,
  175,
  c,
  [32, 5],
  175,
  128,
  130,
  s,
  [176, 3],
  129,
  s,
  [176, 11],
  111,
  112,
  176,
  c,
  [32, 3],
  176,
  120,
  176,
  c,
  [32, 5],
  176,
  128,
  130,
  s,
  [177, 3],
  129,
  s,
  [177, 9],
  c,
  [152, 19],
  s,
  [200, 3],
  129,
  s,
  [200, 9],
  c,
  [32, 19],
  s,
  [201, 3],
  129,
  s,
  [201, 9],
  c,
  [32, 19],
  c,
  [215, 23],
  129,
  226,
  c,
  [44, 19],
  228,
  129,
  227,
  c,
  [22, 19],
  229,
  c,
  [1010, 35],
  231,
  c,
  [36, 16],
  162,
  162,
  c,
  [38, 19],
  c,
  [37, 148],
  237,
  c,
  [75, 74],
  241,
  242,
  30,
  27,
  c,
  [1624, 3],
  135,
  c,
  [752, 5],
  s,
  [169, 3],
  c,
  [14, 3],
  c,
  [1624, 21],
  c,
  [784, 7],
  247,
  c,
  [8, 7],
  c,
  [351, 35],
  158,
  129,
  250,
  158,
  158,
  c,
  [411, 19],
  c,
  [151, 37],
  161,
  252,
  161,
  161,
  s,
  [253, 5, 1],
  259,
  c,
  [524, 6],
  170,
  c,
  [852, 22],
  266,
  c,
  [549, 18],
  c,
  [49, 25],
  c,
  [973, 25],
  271,
  c,
  [2020, 6],
  62,
  129,
  62,
  c,
  [174, 19],
  s,
  [178, 3],
  129,
  s,
  [178, 9],
  c,
  [32, 19],
  s,
  [179, 3],
  129,
  s,
  [179, 9],
  c,
  [32, 19],
  s,
  [180, 3],
  129,
  s,
  [180, 11],
  c,
  [32, 6],
  180,
  120,
  180,
  c,
  [32, 5],
  180,
  128,
  130,
  s,
  [194, 3],
  75,
  97,
  194,
  95,
  s,
  [194, 3],
  90,
  82,
  194,
  96,
  s,
  [194, 5],
  c,
  [161, 10],
  194,
  194,
  88,
  89,
  s,
  [194, 16],
  c,
  [177, 3],
  194,
  s,
  [181, 3],
  129,
  s,
  [181, 11],
  c,
  [85, 6],
  181,
  120,
  181,
  c,
  [85, 5],
  181,
  128,
  130,
  s,
  [195, 3],
  75,
  97,
  195,
  95,
  s,
  [195, 3],
  90,
  82,
  195,
  96,
  s,
  [195, 5],
  c,
  [85, 10],
  195,
  195,
  88,
  89,
  s,
  [195, 16],
  c,
  [85, 3],
  195,
  s,
  [182, 3],
  129,
  s,
  [182, 11],
  111,
  112,
  182,
  c,
  [85, 3],
  182,
  120,
  182,
  c,
  [85, 5],
  182,
  128,
  130,
  s,
  [183, 3],
  129,
  s,
  [183, 9],
  c,
  [234, 19],
  s,
  [184, 3],
  129,
  s,
  [184, 9],
  c,
  [32, 19],
  s,
  [185, 3],
  129,
  s,
  [185, 9],
  c,
  [32, 19],
  s,
  [186, 3],
  129,
  s,
  [186, 9],
  c,
  [32, 8],
  120,
  c,
  [30, 5],
  186,
  128,
  130,
  s,
  [187, 3],
  129,
  s,
  [187, 9],
  c,
  [62, 19],
  s,
  [188, 3],
  129,
  s,
  [188, 9],
  c,
  [62, 14],
  188,
  128,
  130,
  s,
  [189, 3],
  129,
  s,
  [189, 9],
  c,
  [62, 19],
  s,
  [190, 3],
  129,
  s,
  [190, 9],
  c,
  [32, 19],
  s,
  [191, 3],
  129,
  s,
  [191, 9],
  c,
  [32, 19],
  s,
  [192, 3],
  129,
  s,
  [192, 9],
  c,
  [32, 19],
  s,
  [193, 3],
  129,
  s,
  [193, 9],
  c,
  [32, 19],
  s,
  [196, 3],
  129,
  s,
  [196, 9],
  c,
  [32, 16],
  196,
  128,
  130,
  s,
  [197, 3],
  129,
  s,
  [197, 9],
  c,
  [64, 19],
  198,
  198,
  273,
  198,
  198,
  55,
  s,
  [198, 28],
  274,
  c,
  [1645, 24],
  129,
  276,
  c,
  [80, 19],
  277,
  s,
  [204, 3],
  129,
  s,
  [204, 9],
  c,
  [33, 19],
  s,
  [206, 3],
  129,
  s,
  [206, 9],
  c,
  [32, 19],
  s,
  [207, 3],
  129,
  s,
  [207, 9],
  c,
  [32, 19],
  278,
  279,
  129,
  65,
  c,
  [23, 19],
  s,
  [130, 4],
  280,
  s,
  [130, 28],
  30,
  27,
  129,
  282,
  c,
  [56, 19],
  s,
  [205, 3],
  129,
  s,
  [205, 9],
  c,
  [1617, 25],
  c,
  [2587, 18],
  285,
  c,
  [1353, 38],
  220,
  c,
  [37, 3],
  220,
  c,
  [38, 11],
  220,
  220,
  c,
  [38, 16],
  s,
  [220, 16],
  c,
  [1990, 4],
  289,
  290,
  291,
  10,
  292,
  293,
  55,
  s,
  [10, 3],
  294,
  295,
  c,
  [1335, 7],
  17,
  298,
  299,
  55,
  s,
  [17, 3],
  300,
  c,
  [1472, 74],
  c,
  [2332, 97],
  c,
  [1379, 19],
  308,
  c,
  [1534, 35],
  129,
  310,
  c,
  [391, 19],
  312,
  311,
  75,
  c,
  [107, 23],
  315,
  88,
  c,
  [3292, 5],
  s,
  [88, 3],
  317,
  88,
  88,
  c,
  [1666, 22],
  318,
  129,
  84,
  c,
  [83, 19],
  s,
  [119, 19],
  319,
  s,
  [119, 18],
  13,
  320,
  321,
  s,
  [13, 3],
  129,
  322,
  c,
  [1679, 35],
  c,
  [204, 19],
  180,
  61,
  c,
  [2497, 47],
  327,
  c,
  [48, 23],
  329,
  c,
  [49, 24],
  c,
  [24, 24],
  228,
  129,
  100,
  c,
  [179, 19],
  22,
  252,
  22,
  22,
  30,
  27,
  30,
  27,
  c,
  [1720, 6],
  c,
  [3476, 25],
  c,
  [31, 6],
  c,
  [6, 6],
  340,
  18,
  341,
  342,
  55,
  s,
  [18, 3],
  c,
  [45, 25],
  c,
  [621, 37],
  129,
  346,
  c,
  [142, 19],
  129,
  347,
  c,
  [21, 20],
  348,
  c,
  [21, 20],
  349,
  c,
  [21, 19],
  350,
  312,
  311,
  351,
  352,
  c,
  [618, 24],
  354,
  355,
  c,
  [536, 34],
  30,
  27,
  s,
  [92, 4],
  359,
  92,
  c,
  [2016, 25],
  c,
  [2066, 3],
  363,
  c,
  [2115, 26],
  c,
  [269, 20],
  c,
  [4163, 13],
  367,
  s,
  [208, 3],
  129,
  s,
  [208, 9],
  c,
  [194, 19],
  368,
  214,
  214,
  369,
  s,
  [214, 30],
  s,
  [218, 3],
  129,
  s,
  [218, 9],
  c,
  [66, 19],
  370,
  166,
  23,
  c,
  [382, 14],
  23,
  23,
  c,
  [382, 19],
  372,
  180,
  373,
  9,
  129,
  s,
  [9, 3],
  c,
  [65, 19],
  32,
  375,
  374,
  s,
  [32, 3],
  180,
  376,
  180,
  377,
  c,
  [532, 31],
  15,
  129,
  s,
  [15, 3],
  c,
  [65, 19],
  c,
  [2358, 25],
  382,
  c,
  [341, 26],
  c,
  [49, 22],
  c,
  [848, 35],
  c,
  [83, 23],
  81,
  312,
  311,
  81,
  c,
  [521, 24],
  c,
  [485, 8],
  s,
  [88, 4],
  c,
  [522, 3],
  s,
  [86, 3],
  392,
  86,
  393,
  c,
  [72, 23],
  12,
  129,
  s,
  [12, 3],
  c,
  [3158, 42],
  c,
  [23, 23],
  397,
  c,
  [592, 25],
  400,
  401,
  180,
  402,
  16,
  129,
  s,
  [16, 3],
  c,
  [100, 19],
  s,
  [103, 12],
  404,
  s,
  [103, 26],
  113,
  406,
  407,
  129,
  408,
  c,
  [63, 19],
  409,
  129,
  410,
  c,
  [22, 19],
  82,
  312,
  311,
  82,
  c,
  [249, 12],
  c,
  [267, 6],
  c,
  [484, 25],
  129,
  417,
  c,
  [68, 19],
  s,
  [213, 3],
  129,
  s,
  [213, 9],
  c,
  [924, 20],
  418,
  c,
  [1308, 54],
  31,
  420,
  129,
  s,
  [31, 3],
  c,
  [60, 54],
  c,
  [35, 35],
  423,
  c,
  [616, 7],
  424,
  c,
  [232, 17],
  426,
  c,
  [256, 23],
  429,
  c,
  [24, 23],
  c,
  [309, 6],
  c,
  [320, 5],
  85,
  129,
  s,
  [85, 3],
  c,
  [179, 19],
  s,
  [97, 5],
  434,
  435,
  97,
  c,
  [116, 3],
  215,
  c,
  [733, 5],
  215,
  c,
  [70, 14],
  s,
  [215, 16],
  c,
  [86, 3],
  215,
  166,
  24,
  c,
  [196, 14],
  24,
  24,
  c,
  [198, 19],
  439,
  30,
  27,
  441,
  442,
  c,
  [238, 35],
  444,
  445,
  446,
  129,
  115,
  c,
  [332, 54],
  129,
  448,
  c,
  [56, 19],
  c,
  [238, 5],
  94,
  450,
  s,
  [94, 4],
  25,
  252,
  25,
  25,
  c,
  [3750, 111],
  454,
  c,
  [394, 23],
  c,
  [2264, 60],
  c,
  [3550, 27],
  c,
  [1730, 38],
  461,
  c,
  [295, 19],
  c,
  [910, 3],
  c,
  [88, 25],
  c,
  [977, 39]
])
}),
defaultActions: bda({
  idx: u([
  3,
  4,
  s,
  [14, 8, 1],
  23,
  24,
  33,
  35,
  43,
  s,
  [45, 6, 1],
  52,
  58,
  s,
  [60, 4, 1],
  67,
  68,
  70,
  72,
  s,
  [76, 5, 1],
  83,
  93,
  100,
  103,
  104,
  105,
  110,
  144,
  151,
  182,
  183,
  215,
  s,
  [217, 7, 1],
  226,
  227,
  229,
  s,
  [231, 6, 1],
  238,
  239,
  251,
  261,
  266,
  278,
  281,
  282,
  283,
  285,
  286,
  287,
  301,
  302,
  310,
  324,
  329,
  330,
  336,
  344,
  345,
  352,
  360,
  361,
  362,
  s,
  [365, 4, 1],
  370,
  371,
  380,
  384,
  391,
  398,
  403,
  409,
  410,
  412,
  415,
  425,
  426,
  432,
  s,
  [434, 4, 1],
  440,
  447,
  449,
  451,
  452,
  453,
  s,
  [457, 4, 1],
  462,
  464
]),
  goto: u([
  2,
  3,
  52,
  67,
  69,
  71,
  72,
  1,
  4,
  68,
  122,
  123,
  35,
  37,
  53,
  s,
  [55, 6, 1],
  126,
  26,
  s,
  [36, 4, 2],
  49,
  50,
  124,
  139,
  s,
  [164, 5, 1],
  171,
  203,
  7,
  44,
  51,
  48,
  140,
  199,
  220,
  125,
  129,
  211,
  s,
  [132, 6, 1],
  172,
  215,
  216,
  98,
  6,
  s,
  [141, 5, 1],
  147,
  148,
  159,
  118,
  89,
  209,
  131,
  173,
  99,
  5,
  146,
  149,
  157,
  160,
  117,
  74,
  219,
  64,
  11,
  19,
  156,
  116,
  87,
  83,
  120,
  14,
  27,
  33,
  212,
  210,
  150,
  20,
  108,
  80,
  29,
  102,
  76,
  109,
  78,
  91,
  105,
  110,
  79,
  95,
  96,
  121,
  151,
  30,
  112,
  77,
  152,
  153,
  154,
  114,
  107,
  93,
  155,
  111,
  104
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack

    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks


    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 465 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };








    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };






































































































































    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 



        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;





        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (typeof lexer.showPosition === 'function') {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;

                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;




                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




                continue;

            // reduce:
            case 2:



                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, newState, sp - 1, vstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;
/* lexer generated by jison-lex 0.6.1-215 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    
// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: ..................... false
//   uses yylineno: ................... false
//   uses yytext: ..................... false
//   uses yylloc: ..................... false
//   uses lexer values: ............... true / true
//   location tracking: ............... false
//   location assignment: ............. false
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
    done: false,                                /// INTERNAL USE ONLY  
    _backtrack: false,                          /// INTERNAL USE ONLY  
    _input: '',                                 /// INTERNAL USE ONLY  
    _more: false,                               /// INTERNAL USE ONLY  
    _signaled_error_token: false,               /// INTERNAL USE ONLY  
    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        } 
        // else: keep `this._input` as is.  
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously 
        // matched lines end up in the array too. 
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0;  // loc.last_column; 
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;

          if (line.trim().length > 0) {
            nonempty_line_indexes.push(index);
          }
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of error area: limit it 
      // to the top and bottom line count:
      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;  // rule action called reject() implying the next rule should be tested instead. 
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;  // rule action called reject() implying a rule MISmatch. 
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true,
      caseInsensitive: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 0:
        /*! Conditions:: INITIAL */
        /*! Rule::       \/\*(.|\r|\n)*?\*\/ */
        if (yy_.yytext.match(/\r|\n/)) {
          parser.newLine = true;
        }

        if (parser.restricted && parser.newLine) {
          this.unput(yy_.yytext);
          parser.restricted = false;
          return ';';
        }

        break;

      case 1:
        /*! Conditions:: INITIAL */
        /*! Rule::       \/\/.*($|\r\n|\r|\n) */
        if (yy_.yytext.match(/\r|\n/)) {
          parser.newLine = true;
        }

        if (parser.restricted && parser.newLine) {
          this.unput(yy_.yytext);
          parser.restricted = false;
          return ';';
        }

        break;

      case 90:
        /*! Conditions:: INITIAL */
        /*! Rule::       \s+ */
        /* skip whitespace */
        break;

      case 91:
        /*! Conditions:: INITIAL */
        /*! Rule::       \. */
        throw 'Illegal character';

        break;

      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      /*! Conditions:: INITIAL */
      /*! Rule::       extends */
      2: 8,

      /*! Conditions:: INITIAL */
      /*! Rule::       if */
      3: 42,

      /*! Conditions:: INITIAL */
      /*! Rule::       else */
      4: 43,

      /*! Conditions:: INITIAL */
      /*! Rule::       for */
      5: 44,

      /*! Conditions:: INITIAL */
      /*! Rule::       while */
      6: 32,

      /*! Conditions:: INITIAL */
      /*! Rule::       do */
      7: 46,

      /*! Conditions:: INITIAL */
      /*! Rule::       case */
      8: 48,

      /*! Conditions:: INITIAL */
      /*! Rule::       switch */
      9: 47,

      /*! Conditions:: INITIAL */
      /*! Rule::       break */
      10: 86,

      /*! Conditions:: INITIAL */
      /*! Rule::       default */
      11: 50,

      /*! Conditions:: INITIAL */
      /*! Rule::       printNat */
      12: 63,

      /*! Conditions:: INITIAL */
      /*! Rule::       readNat */
      13: 62,

      /*! Conditions:: INITIAL */
      /*! Rule::       this */
      14: 61,

      /*! Conditions:: INITIAL */
      /*! Rule::       new */
      15: 25,

      /*! Conditions:: INITIAL */
      /*! Rule::       null */
      16: 60,

      /*! Conditions:: INITIAL */
      /*! Rule::       void */
      17: 53,

      /*! Conditions:: INITIAL */
      /*! Rule::       macrolib */
      18: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       define */
      19: 16,

      /*! Conditions:: INITIAL */
      /*! Rule::       private */
      20: 27,

      /*! Conditions:: INITIAL */
      /*! Rule::       public */
      21: 4,

      /*! Conditions:: INITIAL */
      /*! Rule::       protected */
      22: 28,

      /*! Conditions:: INITIAL */
      /*! Rule::       static */
      23: 20,

      /*! Conditions:: INITIAL */
      /*! Rule::       display */
      24: 29,

      /*! Conditions:: INITIAL */
      /*! Rule::       edit */
      25: 30,

      /*! Conditions:: INITIAL */
      /*! Rule::       throw */
      26: 84,

      /*! Conditions:: INITIAL */
      /*! Rule::       return */
      27: 85,

      /*! Conditions:: INITIAL */
      /*! Rule::       class */
      28: 5,

      /*! Conditions:: INITIAL */
      /*! Rule::       mod */
      29: 72,

      /*! Conditions:: INITIAL */
      /*! Rule::       div */
      30: 73,

      /*! Conditions:: INITIAL */
      /*! Rule::       client */
      31: 21,

      /*! Conditions:: INITIAL */
      /*! Rule::       server */
      32: 19,

      /*! Conditions:: INITIAL */
      /*! Rule::       System */
      33: 54,

      /*! Conditions:: INITIAL */
      /*! Rule::       str */
      34: 11,

      /*! Conditions:: INITIAL */
      /*! Rule::       try */
      35: 51,

      /*! Conditions:: INITIAL */
      /*! Rule::       catch */
      36: 52,

      /*! Conditions:: INITIAL */
      /*! Rule::       select */
      37: 31,

      /*! Conditions:: INITIAL */
      /*! Rule::       firstonly */
      38: 26,

      /*! Conditions:: INITIAL */
      /*! Rule::       from */
      39: 22,

      /*! Conditions:: INITIAL */
      /*! Rule::       order */
      40: 36,

      /*! Conditions:: INITIAL */
      /*! Rule::       by */
      41: 37,

      /*! Conditions:: INITIAL */
      /*! Rule::       asc */
      42: 38,

      /*! Conditions:: INITIAL */
      /*! Rule::       desc */
      43: 39,

      /*! Conditions:: INITIAL */
      /*! Rule::       where */
      44: 34,

      /*! Conditions:: INITIAL */
      /*! Rule::       exists */
      45: 23,

      /*! Conditions:: INITIAL */
      /*! Rule::       join */
      46: 33,

      /*! Conditions:: INITIAL */
      /*! Rule::       next */
      47: 24,

      /*! Conditions:: INITIAL */
      /*! Rule::       index */
      48: 35,

      /*! Conditions:: INITIAL */
      /*! Rule::       {utcdate} */
      49: 57,

      /*! Conditions:: INITIAL */
      /*! Rule::       [0-9]+(\.[0-9e]+)?\b */
      50: 12,

      /*! Conditions:: INITIAL */
      /*! Rule::       {hexnumber} */
      51: 56,

      /*! Conditions:: INITIAL */
      /*! Rule::       {id} */
      52: 55,

      /*! Conditions:: INITIAL */
      /*! Rule::       {string} */
      53: 58,

      /*! Conditions:: INITIAL */
      /*! Rule::       {string2} */
      54: 59,

      /*! Conditions:: INITIAL */
      /*! Rule::       == */
      55: 74,

      /*! Conditions:: INITIAL */
      /*! Rule::       = */
      56: 9,

      /*! Conditions:: INITIAL */
      /*! Rule::       \+= */
      57: 87,

      /*! Conditions:: INITIAL */
      /*! Rule::       -= */
      58: 88,

      /*! Conditions:: INITIAL */
      /*! Rule::       \+ */
      59: 65,

      /*! Conditions:: INITIAL */
      /*! Rule::       - */
      60: 64,

      /*! Conditions:: INITIAL */
      /*! Rule::       \* */
      61: 70,

      /*! Conditions:: INITIAL */
      /*! Rule::       \/ */
      62: 71,

      /*! Conditions:: INITIAL */
      /*! Rule::       >= */
      63: 68,

      /*! Conditions:: INITIAL */
      /*! Rule::       <= */
      64: 69,

      /*! Conditions:: INITIAL */
      /*! Rule::       != */
      65: 75,

      /*! Conditions:: INITIAL */
      /*! Rule::       && */
      66: 83,

      /*! Conditions:: INITIAL */
      /*! Rule::       \|\| */
      67: 82,

      /*! Conditions:: INITIAL */
      /*! Rule::       & */
      68: 78,

      /*! Conditions:: INITIAL */
      /*! Rule::       \| */
      69: 79,

      /*! Conditions:: INITIAL */
      /*! Rule::       ~ */
      70: 67,

      /*! Conditions:: INITIAL */
      /*! Rule::       << */
      71: 80,

      /*! Conditions:: INITIAL */
      /*! Rule::       >> */
      72: 81,

      /*! Conditions:: INITIAL */
      /*! Rule::       > */
      73: 76,

      /*! Conditions:: INITIAL */
      /*! Rule::       < */
      74: 77,

      /*! Conditions:: INITIAL */
      /*! Rule::       ! */
      75: 66,

      /*! Conditions:: INITIAL */
      /*! Rule::       # */
      76: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       :: */
      77: 89,

      /*! Conditions:: INITIAL */
      /*! Rule::       \. */
      78: 15,

      /*! Conditions:: INITIAL */
      /*! Rule::       , */
      79: 10,

      /*! Conditions:: INITIAL */
      /*! Rule::       \{ */
      80: 6,

      /*! Conditions:: INITIAL */
      /*! Rule::       \} */
      81: 7,

      /*! Conditions:: INITIAL */
      /*! Rule::       \( */
      82: 17,

      /*! Conditions:: INITIAL */
      /*! Rule::       \) */
      83: 18,

      /*! Conditions:: INITIAL */
      /*! Rule::       \[ */
      84: 40,

      /*! Conditions:: INITIAL */
      /*! Rule::       \] */
      85: 41,

      /*! Conditions:: INITIAL */
      /*! Rule::       : */
      86: 49,

      /*! Conditions:: INITIAL */
      /*! Rule::       ; */
      87: 45,

      /*! Conditions:: INITIAL */
      /*! Rule::       \\ */
      88: 91,

      /*! Conditions:: INITIAL */
      /*! Rule::       \? */
      89: 90,

      /*! Conditions:: INITIAL */
      /*! Rule::       $ */
      92: 3
    },

    rules: [
      /*  0: */  /^(?:\/\*(.|\r|\n)*?\*\/)/i,
      /*  1: */  /^(?:\/\/.*($|\r\n|\r|\n))/i,
      /*  2: */  /^(?:extends)/i,
      /*  3: */  /^(?:if)/i,
      /*  4: */  /^(?:else)/i,
      /*  5: */  /^(?:for)/i,
      /*  6: */  /^(?:while)/i,
      /*  7: */  /^(?:do)/i,
      /*  8: */  /^(?:case)/i,
      /*  9: */  /^(?:switch)/i,
      /* 10: */  /^(?:break)/i,
      /* 11: */  /^(?:default)/i,
      /* 12: */  /^(?:printNat)/i,
      /* 13: */  /^(?:readNat)/i,
      /* 14: */  /^(?:this)/i,
      /* 15: */  /^(?:new)/i,
      /* 16: */  /^(?:null)/i,
      /* 17: */  /^(?:void)/i,
      /* 18: */  /^(?:macrolib)/i,
      /* 19: */  /^(?:define)/i,
      /* 20: */  /^(?:private)/i,
      /* 21: */  /^(?:public)/i,
      /* 22: */  /^(?:protected)/i,
      /* 23: */  /^(?:static)/i,
      /* 24: */  /^(?:display)/i,
      /* 25: */  /^(?:edit)/i,
      /* 26: */  /^(?:throw)/i,
      /* 27: */  /^(?:return)/i,
      /* 28: */  /^(?:class)/i,
      /* 29: */  /^(?:mod)/i,
      /* 30: */  /^(?:div)/i,
      /* 31: */  /^(?:client)/i,
      /* 32: */  /^(?:server)/i,
      /* 33: */  /^(?:System)/i,
      /* 34: */  /^(?:str)/i,
      /* 35: */  /^(?:try)/i,
      /* 36: */  /^(?:catch)/i,
      /* 37: */  /^(?:select)/i,
      /* 38: */  /^(?:firstonly)/i,
      /* 39: */  /^(?:from)/i,
      /* 40: */  /^(?:order)/i,
      /* 41: */  /^(?:by)/i,
      /* 42: */  /^(?:asc)/i,
      /* 43: */  /^(?:desc)/i,
      /* 44: */  /^(?:where)/i,
      /* 45: */  /^(?:exists)/i,
      /* 46: */  /^(?:join)/i,
      /* 47: */  /^(?:next)/i,
      /* 48: */  /^(?:index)/i,
      /* 49: */  /^(?:(\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d))/i,
      /* 50: */  /^(?:\d+(\.[\de]+)?\b)/i,
      /* 51: */  /^(?:(0x[\da-f]*[u]*))/i,
      /* 52: */  /^(?:([^\W\d]\w*))/i,
      /* 53: */  /^(?:([@]*"(\\.|[^"])*"))/i,
      /* 54: */  /^(?:('(\\.|[^'])*'))/i,
      /* 55: */  /^(?:==)/i,
      /* 56: */  /^(?:=)/i,
      /* 57: */  /^(?:\+=)/i,
      /* 58: */  /^(?:-=)/i,
      /* 59: */  /^(?:\+)/i,
      /* 60: */  /^(?:-)/i,
      /* 61: */  /^(?:\*)/i,
      /* 62: */  /^(?:\/)/i,
      /* 63: */  /^(?:>=)/i,
      /* 64: */  /^(?:<=)/i,
      /* 65: */  /^(?:!=)/i,
      /* 66: */  /^(?:&&)/i,
      /* 67: */  /^(?:\|\|)/i,
      /* 68: */  /^(?:&)/i,
      /* 69: */  /^(?:\|)/i,
      /* 70: */  /^(?:~)/i,
      /* 71: */  /^(?:<<)/i,
      /* 72: */  /^(?:>>)/i,
      /* 73: */  /^(?:>)/i,
      /* 74: */  /^(?:<)/i,
      /* 75: */  /^(?:!)/i,
      /* 76: */  /^(?:#)/i,
      /* 77: */  /^(?:::)/i,
      /* 78: */  /^(?:\.)/i,
      /* 79: */  /^(?:,)/i,
      /* 80: */  /^(?:\{)/i,
      /* 81: */  /^(?:\})/i,
      /* 82: */  /^(?:\()/i,
      /* 83: */  /^(?:\))/i,
      /* 84: */  /^(?:\[)/i,
      /* 85: */  /^(?:\])/i,
      /* 86: */  /^(?::)/i,
      /* 87: */  /^(?:;)/i,
      /* 88: */  /^(?:\\)/i,
      /* 89: */  /^(?:\?)/i,
      /* 90: */  /^(?:\s+)/i,
      /* 91: */  /^(?:\.)/i,
      /* 92: */  /^(?:$)/i
    ],

    conditions: {
      'INITIAL': {
        rules: [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92
        ],

        inclusive: true
      }
    }
  };

  return lexer;
}();
parser.lexer = lexer;




function Parser() {
    this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

function yyparse() {
    return parser.parse.apply(parser, arguments);
}



export default {
    parser,
    Parser,
    parse: yyparse,
    
};

